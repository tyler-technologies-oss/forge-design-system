"use strict";(self.webpackChunkforge_design_system=self.webpackChunkforge_design_system||[]).push([[5838],{1533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var o=n(70684),r=n(74848),a=n(28453);const s={title:"Enhanced Angular Integration",decription:"Using Forge components in Angular without CUSTOM_ELEMENTS_SCHEMA.",authors:["mike.matuszak"],tags:["forge","angular","custom-elements","web-components"]},i=void 0,l={authorsImageUrls:[void 0]},u=[];function c(e){const t={code:"code",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(t.p,{children:['The Angular framework does a "pretty good" job of working with Web Components out of the box, but having to use ',(0,r.jsx)(t.code,{children:"CUSTOM_ELEMENTS_SCHEMA"})," weakens template type-checking overall, can mask errors, and doesn't provide any autocomplete or IntelliSense.  As of v2.1.0 of the ",(0,r.jsx)(t.code,{children:"@tylertech/forge-angular"})," library, however, released in November 2022, it's no longer necessary to specify the schema, and if you import the associated modules, Forge components can be used as though they were Angular components!"]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(96540);const r={},a=o.createContext(r);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:t},e.children)}},70684:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/03/22/angular-proxies","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-03-22-angular-proxies/index.md","source":"@site/blog/2023-03-22-angular-proxies/index.md","title":"Enhanced Angular Integration","description":"The Angular framework does a \\"pretty good\\" job of working with Web Components out of the box, but having to use CUSTOMELEMENTSSCHEMA weakens template type-checking overall, can mask errors, and doesn\'t provide any autocomplete or IntelliSense.  As of v2.1.0 of the @tylertech/forge-angular library, however, released in November 2022, it\'s no longer necessary to specify the schema, and if you import the associated modules, Forge components can be used as though they were Angular components!","date":"2023-03-22T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"angular","permalink":"/blog/tags/angular"},{"inline":true,"label":"custom-elements","permalink":"/blog/tags/custom-elements"},{"inline":true,"label":"web-components","permalink":"/blog/tags/web-components"}],"readingTime":8.36,"hasTruncateMarker":true,"authors":[{"name":"Mike Matuszak","title":"Front End Architect","url":"https://github.com/mikematusz","imageURL":"https://github.com/mikematusz.png","key":"mike.matuszak","page":null}],"frontMatter":{"title":"Enhanced Angular Integration","decription":"Using Forge components in Angular without CUSTOM_ELEMENTS_SCHEMA.","authors":["mike.matuszak"],"tags":["forge","angular","custom-elements","web-components"]},"unlisted":false,"prevItem":{"title":"Adopting Container Queries","permalink":"/blog/2023/05/05/adopting-container-queries"},"nextItem":{"title":"Split View Component","permalink":"/blog/2023/02/10/split-view-component"}}')}}]);