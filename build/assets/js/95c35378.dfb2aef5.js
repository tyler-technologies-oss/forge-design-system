"use strict";(self.webpackChunkforge_design_system=self.webpackChunkforge_design_system||[]).push([[9070],{72832:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"patterns/progress-and-loading/progress-and-loading","title":"Progress & Loading","description":"Communicate that content is changing with progress & loading patterns.","source":"@site/docs/patterns/progress-and-loading/progress-and-loading.md","sourceDirName":"patterns/progress-and-loading","slug":"/patterns/progress-and-loading/","permalink":"/patterns/progress-and-loading/","draft":false,"unlisted":false,"editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/docs/patterns/progress-and-loading/progress-and-loading.md","tags":[],"version":"current","lastUpdatedAt":1738178637000,"frontMatter":{},"sidebar":"patternsSidebar","previous":{"title":"Primary","permalink":"/patterns/navigation/primary"},"next":{"title":"Search & filter","permalink":"/patterns/search-and-filter/"}}');var i=t(74848),o=t(28453);const r={},a="Progress & Loading",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Perceptions of waiting",id:"perceptions-of-waiting",level:3},{value:"Types",id:"types",level:3},{value:"1. Initial page load",id:"1-initial-page-load",level:2},{value:"Principles",id:"principles",level:3},{value:"Components to use",id:"components-to-use",level:3},{value:"Progressive loading",id:"progressive-loading",level:3},{value:"2. Full page change",id:"2-full-page-change",level:2},{value:"Principles",id:"principles-1",level:3},{value:"Components to use",id:"components-to-use-1",level:3},{value:"3. Components",id:"3-components",level:2},{value:"Principles",id:"principles-2",level:3},{value:"Components to use",id:"components-to-use-2",level:3}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components},{ImageBlock:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ImageBlock",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"progress--loading",children:"Progress & Loading"})}),"\n",(0,i.jsx)(n.p,{children:"Communicate that content is changing with progress & loading patterns."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Progress indicators inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates. They communicate an app\u2019s state and indicate available actions, such as whether users can navigate away from the current screen. Use a progress indicator for operations that take more than 1 second."}),"\n",(0,i.jsx)(n.p,{children:"Progress indicators are used to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Assure the user that the system is working."}),"\n",(0,i.jsx)(n.li,{children:"Provide operational transparency."}),"\n",(0,i.jsx)(n.li,{children:"Communicate progress made vs progress pending."}),"\n",(0,i.jsx)(n.li,{children:"Reduce users perception of time elapsed."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"perceptions-of-waiting",children:"Perceptions of waiting"}),"\n",(0,i.jsxs)(n.p,{children:["Uncertain waits are perceived as longer than finite waits. Even if we can\u2019t always make actual wait times shorter, we can make the wait more enjoyable. User satisfaction directly correlates to ",(0,i.jsx)(n.strong,{children:"expectations"})," (how long do I expect this to take? ) and ",(0,i.jsx)(n.strong,{children:"perception"})," (how long did I perceive this to take?). We can manage user expectations through indicators and operational transparency. When possible, provide users with ",(0,i.jsx)(n.strong,{children:"a time estimate"})," and ",(0,i.jsx)(n.strong,{children:"a description of what is happening."})]}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.p,{children:"Progress indicators and patterns differ depending on user goals:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Inform me of an initial page load."}),"\n",(0,i.jsx)(n.li,{children:"Inform me that the full page is changing."}),"\n",(0,i.jsx)(n.li,{children:"Inform me that components are changing."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-initial-page-load",children:"1. Initial page load"}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Deliver something meaningful to the user as soon as possible."})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Create expectations around content that will be displayed."})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"components-to-use",children:"Components to use"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Component"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Usage"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Tradeoffs"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"/components/progress-and-loading/skeleton",children:"Skeleton loading"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Use when content size/shape is known. Load skeleton components, then fade in components as they become available."}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"???"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Linear page progress (coming soon!)"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Use when the content to be loaded is of unknown or variable size or quantity. Display a description of the process with a linear progress bar (see pattern below)."}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Doesn't create expectations around what kind of content will be available on the page once it loads."})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"progressive-loading",children:"Progressive loading"}),"\n",(0,i.jsxs)(n.p,{children:["\u201cIt\u2019s important to deliver something meaningful to the user as soon as possible\u201d (MDN). Instead of waiting to display a screen until everything has loaded, ",(0,i.jsx)(n.strong,{children:"progressive loading"})," displays a basic view of a page with placeholders where more content will eventually appear. Then, content loads as it is ready. This creates expectations and reduces perceived load times. Progressive loading is \u201call about deferring loading of as many resources as possible (HTML, CSS, JavaScript), and only loading those immediately that are really needed for the very first experience\u201d (Read more about the technical implementation: ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Loading",children:"MDN: Progressive Loading"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Progressive loading should be used in conjunction with skeleton patterns in order to load a full page. The process looks like this: Display skeleton screen \u2192 fade in individual components once they\u2019re loaded."}),"\n",(0,i.jsx)(n.p,{children:"The concept of progressive loading can also be applied to loading parts of a page. Use skeleton components to load in specific components that may change or take longer to load, while still allowing users to interact with the parts of a page that have loaded."}),"\n",(0,i.jsx)(s,{"max-width":"650px",caption:"Use progressive loading to load in a new page when the type and size of content is known.",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Skeleton loading.",src:t(7675).A+"",width:"600",height:"305"})})}),"\n",(0,i.jsx)(s,{"max-width":"650px",caption:"Use a linear page progress pattern when the content to be loaded is of unknown or variable size or quantity. A description of the process is displayed with a linear progress bar.",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Linear page progress.",src:t(32193).A+"",width:"600",height:"235"})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-full-page-change",children:"2. Full page change"}),"\n",(0,i.jsx)(n.p,{children:"Prevent users from interacting with content on a page when it may be changing due to a submission, error, or change in data."}),"\n",(0,i.jsx)(n.h3,{id:"principles-1",children:"Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Indicate a change in state and prevent user interaction with components that are changing."})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"components-to-use-1",children:"Components to use"}),"\n",(0,i.jsxs)(n.p,{children:["Use a ",(0,i.jsx)(n.a,{href:"/components/notifications-and-messages/busy-indicator",children:"busy indicator"})," to temporarily prevent users from interacting with content on a page that may be changing or loading."]}),"\n",(0,i.jsx)(n.p,{children:"While effective at preventing interaction, busy indicators are interruptive."}),"\n",(0,i.jsx)(s,{padded:!1,caption:"Use a busy indicator to temporarily prevent users from interacting with content on the page..",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Full page busy indicator.",src:t(43070).A+"",width:"1440",height:"1024"})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-components",children:"3. Components"}),"\n",(0,i.jsx)(n.p,{children:"Communicate that components are changing or loading using circular or linear progress indicators."}),"\n",(0,i.jsx)(n.h3,{id:"principles-2",children:"Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Localized indication."})," Place progress indicators close to the content that's changing. Use a progress indicator for the smallest unit that's changing; ie, a button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create expectations by using consistent controls across the same elements."})," If your app uses a circular progress indicator in a button, don't use a linear progress indicator in a button in another place in your app."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"components-to-use-2",children:"Components to use"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Component"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Usage"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Tradeoffs"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"/components/progress-and-loading/circular-progress",children:"Circular progress spinner"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Fits well inside components such as buttons and cards, or in place of icons."}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"May be associated with slightly longer perceived wait times."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"/components/progress-and-loading/linear-progress",children:"Linear progress indicator"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:'Associated with perceptions of shorter wait times. Use them for components that have an "opening state," such as an autocomplete, select, or expansion panel.'}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"May not visually fit into components such as buttons or in place of icons."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},43070:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/busy-indicator-7854f129dcae64a25b32a9087760d18c.png"},32193:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/linear-page-progress-32a3669de62818ca40b06ae2465dcb76.gif"},7675:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/skeleton-ef8cb51f7b8aeec64dbd0e7a0519a8ee.gif"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);