"use strict";(self.webpackChunkforge_design_system=self.webpackChunkforge_design_system||[]).push([[8130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/02/06/forge-2025","metadata":{"permalink":"/blog/2025/02/06/forge-2025","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2025-02-06-forge-2025/index.md","source":"@site/blog/2025-02-06-forge-2025/index.md","title":"Forge 2025 Update","description":"What\'s coming to Forge in 2025!","date":"2025-02-06T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"}],"readingTime":12.855,"hasTruncateMarker":true,"authors":[{"name":"Kieran Nichols","title":"Software Architect","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols","page":null}],"frontMatter":{"title":"Forge 2025 Update","description":"What\'s coming to Forge in 2025!","authors":["kieran.nichols"],"tags":["forge"]},"unlisted":false,"nextItem":{"title":"Forge 3.0 is now available!","permalink":"/blog/2024/06/10/forge-3-generally-available"}},"content":"As we move into 2025 and look ahead, we wanted to share what we have planned for Forge in the coming year. We have a\\nlot of exciting updates and features on deck, and we can\'t wait to share them with you. Let\'s dive in!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Forge v3\\n\\nBefore we get into the details of what\'s coming in 2025, we wanted to remind everyone that Forge v3 is available, and\\nwe encourage you to upgrade to take advantage of the latest features and improvements as soon as possible.\\n\\nPlease refer to the [Forge v3 announcement](/blog/2024/06/10/forge-3-generally-available) for detailed instructions on how\\nto upgrade your projects.\\n\\n:::note\\nWhile we encourage everyone to upgrade to Forge v3 as soon as they can, we understand that upgrading can sometimes be a\\nsignificant effort. We have documentation, an automated upgrade utility, and resources to help you through the upgrade\\nprocess. If you have any questions or need assistance, please don\'t hesitate to reach out to us on Teams!\\n\\nIt\'s very important that we all work together to keep our applications up to date and consistent. Upgrading to the latest\\nversion of Forge is a key part of that effort and the larger Tyler 2030 vision.\\n:::\\n\\n## Major Version Updates\\n\\nWe understand that major version updates can be disruptive, so we wanted to share our plans for future major version\\nupdates to help give you confidence in Forge. We are committed to providing a smooth upgrade path and clear documentation\\nto make the transition as seamless as possible in future versions.\\n\\nHere\'s what you can expect:\\n\\n- **Limited or No Breaking Changes**: We will do our best to avoid breaking changes in future major version updates by\\ninstead deprecating features/components and replacing them with a new implementation. If breaking changes are necessary,\\nwe will provide clear guidance on how to migrate your code seamlessly and do our best to provide tooling to automate it\\nif possible.\\n\\n- **Long-Term Support**: We will provide long-term support for the \\"current - 1\\" major versions of Forge. This means that\\nwe will continue to provide bug fixes and security updates for the previous major version for a period of time after a\\nnew major version is released. This will give you more time to upgrade to the latest version without worrying about\\nmissing out on important updates.\\n\\n- **Upgrade Guides**: We will provide detailed upgrade guides for each major version update to help you understand what\\nhas changed and how to update your code. These guides will include information on breaking changes (if any), new features,\\nand best practices to help you make the transition as smooth as possible.\\n\\n:::note\\nWhile we have an idea of what a Forge v4 might look like, we have not even reached the planning phase yet. We do not intend\\nto release a new major version of Forge in 2025. We want to get Forge v3 into the hands of as many developers as possible\\nand ensure that it meets the needs of our users before we start planning for the next major version to ensure a seamless\\nupgrade path.\\n\\nWe want to introduce stability in the Forge ecosystem and ensure that developers can rely on Forge as a long-term solution\\nwithout worrying about frustrating breaking changes.\\n:::\\n\\n## Forge Extended\\n\\nWe\'re investing time into extending Forge\'s capabilities to make it even more powerful, by creating a new library of\\ncomposite components that implement common patterns and best practices. This will make it faster and easier to build\\ncomplex applications by utilizing larger blocks/components that are already built and tested.\\n\\nExamples of these types of components might include:\\n\\n- Filter Sidesheet\\n- Confirmation Dialog\\n- Side Navigation\\n- Table Header\\n- Responsive Toolbar\\n- ... and many more!\\n\\nAny time you find yourself building a component that is a common pattern across applications, you can look to Forge\\nExtended to see if there is a component that already exists that you can use. If you find that a component is missing,\\nyou can contribute to the Forge Extended library by creating a new component and submitting a pull request.\\n\\nWe believe that this will help developers build applications faster and more efficiently, as well improve consistency\\nand maintainability across projects. This new library will be built on top of the primitive components that are already\\navailable in Forge v3, and will provide a higher level of abstraction to help you build applications more quickly.\\n\\nWe\'re excited to share more details about Forge Extended in the coming months, so stay tuned for updates!\\n\\n### Blocks\\n\\nIn addition to the new Forge Extended library, we\'re also planning to introduce a new concept called \\"Blocks\\" (formerly\\nknown as \\"Recipes\\") to Forge. Blocks are larger sections of UI that can be easily added to your application to by simply\\ncopying and pasting the code. This will allow you to quickly add common patterns and components to your application\\nwithout having to build them from scratch, but still provide the flexibility to customize them to fit your needs.\\n\\nBlocks are made up of both primitive Forge components and native HTML elements + styles, as well as components from the\\nForge Extended library, and will provide a more efficient way to build applications allowing developers to get up and\\nrunning much more quickly.\\n\\nBlocks will be available in the Forge documentation and will include detailed instructions on how to use them in your\\napplications with examples and best practices. We\'ll release more information about Blocks in the coming months!\\n\\n## Lit-based Components\\n\\nWe\'re also investing time into improving the developer experience in Forge by adopting [Lit][lit] as the base for\\nall new Forge components. Lit is a lightweight library for building web components using modern web standards,\\nand it provides a simple and efficient way to create reusable components with a framework-like feel.\\n\\nForge has always been built as web components, but does not rely on any abstraction libraries or frameworks which\\nmeant we needed to write and maintain more boilerplate code, leading to larger and more inefficient production\\nbundles. By adopting Lit, we hope to provide a more performant, consistent, and modern development experience for\\nmaintainers and ease the barrier to entry for new contributors.\\n\\n:::note\\nThis change will be transparent to developers using Forge, and you will not need to make any changes to your code.\\n\\nYou will likely start using the Lit-based components without even realizing it, as we will be gradually introducing\\nthem into the Forge component library over time.\\n:::\\n\\n[lit]: https://lit.dev/\\n\\n## New Components\\n\\nWe\'re also planning to release a number of new components in 2025 to help fill in some of the gaps that have been\\nidentified by the community.\\n\\nSome of the components we\'re planning to release include:\\n\\n- **Tree**: A tree component that can be used to display hierarchical data in a tree-like structure with expandable\\n  and collapsible nodes. This component will be highly customizable and provide a flexible way to display complex data\\n  structures.\\n\\n- **Meter**: A meter and meter-group component that can be used to represent scalar values within a known range. These\\n  components will provide a simple and flexible way to visualize data in a more intuitive and engaging way. Not to be\\n  confused with linear progress indicators, meters are used to represent a value within a range (such as a gauge or\\n  thermometer), whereas progress indicators are used to represent the completion or busy state of an application task.\\n\\n- **Breadcrumbs**: A breadcrumbs component that can be used to display a breadcrumb trail for navigation purposes. This\\n  component will provide a simple and intuitive way to navigate through a hierarchy of pages or sections in your\\n  application.\\n\\n- **Inline Dropdowns**: This is the next evolution of how Forge handles dropdowns. This pattern will allow you to\\n  configure a dropdown declaratively and inline with the flow of your page. Built on top of the new Forge v3 popover,\\n  this will provide a more flexible and developer-friendly way to create your own dropdowns, as well as improve the\\n  ergonomics of existing dropdown-based components.\\n\\n- **Data Grid**: A powerful and flexible data grid component that will provide more advanced features than our current\\n `<forge-table>` component.\\n\\n- **Virtual Scroller**: A virtual scroller component that can be used to display large lists of items efficiently by\\n  only rendering the items that are currently visible on the screen.\\n\\n:::note\\nThese are just a few examples of the new components we\'re planning to release in 2025. We\'re always looking for\\nfeedback and suggestions from the community, so if there\'s a component you\'d like to see in Forge, please let us know!\\n:::\\n\\n## Web Features\\n\\nForge is constantly evolving, and so are the latest web features and APIs. We\'re always looking for ways to improve the\\ndeveloper experience and provide new features and components.\\n\\nThis is only more true because Forge is built on top of web components, which are a rapidly evolving standard that\\ncontinues to introduce new features and capabilities on a regular basis. We\'re committed to staying up to date with\\nthe latest web standards and providing you with the tools and components you need to build modern and performant\\napplications.\\n\\nSome of the features we\'re looking at for the future include:\\n\\n- **Custom States**: This new API is available on the [`ElementInternals`][mdn-element-internals] interface and allows you to define custom\\n  states for your custom elements. This provides a more efficient and familiar way to use CSS for state-based\\n  customizations via the new [`:state(<state name>)`][mdn-states] pseudo-class.\\n\\n  :::note\\n  This will also affect how we reflect certain JavaScript properties to attributes. We will no longer need to\\n  reflect properties to attributes for component state changes, which will improve performance and reduce the amount\\n  of boilerplate code needed to manage state changes within custom elements.\\n  :::\\n\\n- **Cross-root ARIA**: Web components that make use of shadow DOM have always had a challenge with ARIA attributes\\n  that need to be applied to elements outside of the shadow root. The new [Reference Target proposal][reference-target]\\n  aims to address this issue by providing a way for developers using web components to apply ARIA attributes to the\\n  internals of an element via IDREFs. We\'re very excited about this proposal and are looking forward to implementing it\\n  in Forge once it\'s supported in all browsers.\\n\\n- **CSS Relative Colors**: This [new syntax][mdn-css-rel] is already available in browsers and allows you to define colors\\n  relative to other colors in varying color formats. This will provide a more flexible and powerful way to theme\\n  Forge components and create dynamic color schemes that adapt to different contexts and environments.\\n\\n- **CSS Anchor Positioning**: This is an [exciting new feature][mdn-css-anchor] that will allow us to use pure CSS to position\\n  floating elements around an anchor element. This will provide a more efficient and performant way to create\\n  tooltips, popovers, and other floating elements in Forge without relying on JavaScript for positioning.\\n\\nand many more!\\n\\n[mdn-element-internals]: https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals\\n[mdn-states]: https://developer.mozilla.org/en-US/docs/Web/CSS/:state\\n[mdn-css-rel]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_colors/Relative_colors\\n[mdn-css-anchor]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_anchor_positioning\\n[reference-target]: https://github.com/WICG/webcomponents/issues/1086\\n\\n## State of Accessibility\\n\\nIn 2024 Tyler embarked on a journey to improve the accessibility compliance across all of our applications. This\\ninitiative has been a great success, and we are seeing more and more applications becoming compliant with the\\nlatest accessibility standards.\\n\\nAutomated scanning tools such as ARC Toolkit, Level Access, and Axe have been instrumental in identifying accessibility\\nissues and guiding developers on how to fix them.\\n\\nForge v3 made significant improvements to accessibility by providing better support for screen readers, keyboard\\nnavigation, and other assistive technologies. We are committed to continuing to improve accessibility in Forge and\\nensuring that all applications built with Forge are accessible to everyone.\\n\\n:::warning\\nKeep in mind that automated tools can only catch a portion of accessibility issues, and manual testing is still\\nrequired to ensure that your applications are fully accessible.\\n\\nThese tools can also produce **false positives**, so it\'s important to review the results and verify that the issues are\\nreal before making changes. We\'ve started an initiative to document and track these false positives in Coda, and we\\nencourage you to **[review this list][coda-false-positives]** and provide feedback if you encounter any false positives\\nin your applications.\\n\\nPlease reach out to our accessibility experts if you have any questions or need assistance with accessibility in your\\napplications.\\n:::\\n\\n[coda-false-positives]: https://coda.io/d/Forge-A11y-False-Positives_dhzVxEyztD2/Forge-A11y-False-Positives_sur_Ga9T#_luAuQKwy\\n\\n## Public Forge Website\\n\\nA longer term goal for the Tyler Forge\u2122 design system has been to make it publicly available to the world. We are\\nseeking to further engage in the open-source world and will be transitioning Tyler Forge\u2122 design documentation into\\na publicly available site in 2025!\\n\\n### What does this mean for you?\\n\\nNot much will change for you as a Forge user. The public Forge website will provide much of the same content you\'re used\\nto today. You will still be able to access documentation, components, patterns, and other resources related to Forge\\nbut without needing to log in to the Tyler network. \ud83c\udf89\\n\\n### How will this work?\\n\\nWe have secured a new domain for the public Forge website, and we are working on migrating the current documentation\\nand resources to the new site.\\n\\nThe https://forge.tylertech.com domain will continue to work as before and still require Tyler credentials. This will\\nallow for us to publish internal content that is only available to Tyler employees, such as case studies, application\\ndemos/screenshots, relevant Confluence and Coda links, ...etc. Navigating to the public Forge website will be quick\\nand easy from this internal site and can be bookmarked separately for quick access.\\n\\nWe\'re excited to share the Forge design system with the world, and it will complement the already public and open source\\nForge component library perfectly.\\n\\n## Figma Library\\n\\nOur Forge Figma library is continuing to evolve to set the foundation for our 2025 design vision. With a more streamlined\\ncomponent system and scalable design tokens, we\'re ensuring consistency and efficiency across all our digital\\nexperiences. This refined library empowers our team to prototype faster, collaborate seamlessly, and adapt effortlessly\\nto emerging design trends. As we look ahead, it will remain the cornerstone of our design innovation, enabling us to\\ncraft user experiences that are not only visually compelling but also intuitive and inclusive.\\n\\nWe are also exploring the possibility of making our Figma library publicly available as well to further align with\\nthe public Forge website and component library. This will allow anyone to access our design system and use it to create\\ntheir own designs and prototypes.\\n\\n## Conclusion\\n\\nAs you can see, we have a lot of exciting updates and features planned for Forge in 2025, and we can\'t wait to share\\nthem with you! We\'re committed to providing you with the tools and resources you need to build modern, performant,\\nand accessible applications with Forge, and we\'re always looking for ways to improve and evolve the platform.\\n\\nWe\'re excited to continue working with you to make Forge the best it can be, and we look forward to hearing your\\nfeedback and suggestions as we move forward. Thank you for being a part of the Forge community, and we can\'t wait to\\nsee what we can build together in 2025!\\n\\nIf you have any questions or feedback, please don\'t hesitate to reach out to us on Teams or via email. We\'re always\\nhere to help and support you in any way we can.\\n\\nHere\'s to a great year ahead with Forge! \ud83d\ude80"},{"id":"/2024/06/10/forge-3-generally-available","metadata":{"permalink":"/blog/2024/06/10/forge-3-generally-available","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2024-06-10-forge-3-generally-available/index.md","source":"@site/blog/2024-06-10-forge-3-generally-available/index.md","title":"Forge 3.0 is now available!","description":"Forge 3.0 is now generally available for all to install and start using.","date":"2024-06-10T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"components","permalink":"/blog/tags/components"}],"readingTime":16.56,"hasTruncateMarker":true,"authors":[{"name":"Kieran Nichols","title":"Software Architect","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols","page":null}],"frontMatter":{"title":"Forge 3.0 is now available!","description":"Forge 3.0 is now generally available for all to install and start using.","authors":["kieran.nichols"],"tags":["forge","components"]},"unlisted":false,"prevItem":{"title":"Forge 2025 Update","permalink":"/blog/2025/02/06/forge-2025"},"nextItem":{"title":"Forge 3.0 - Coming Soon","permalink":"/blog/2024/04/02/forge-3-coming-soon"}},"content":"Today we\'re excited to share the next major version of Tyler Forge\u2122 components! It has been a monumental\\neffort, and we\'re extremely happy with where the final product ended up. This new version modernizes the\\nlibrary, and opens the door to many new possibilities for developers building applications with Forge.\\nWe\'re looking forward to seeing what you build with it!\\n\\n\x3c!-- truncate --\x3e\\n\\nKey highlights of this release include:\\n\\n- A focus on core accessibility improvements\\n- Removal of our dependency on Material\\n- Revamped theming system\\n- Uniform typography scale and new type styles\\n- Introduction of design tokens\\n- Separation of focus and interaction states\\n- Usage pattern updates for accessible lists\\n- Improved dialog implementation\\n- Button and form control HTML structure updates\\n- New overlay primitive for all floating elements (popover, tooltip, toast... etc.)\\n- End of life for TCW 1.x (effective as of 6/10/2024)\\n\\n... and much more! \ud83c\udf89\\n\\n:::info TL;DR\\nThis release includes many new features and improvements, as well as some breaking changes. We\'ve done our best to make\\nthe upgrade process as smooth as possible, but there are some changes that you should be aware of. Please review the full\\nlist of changes, and let us know if you run into any issues. We\'re here to help!\\n\\n- Show me how to [upgrade](#how-do-i-upgrade).\\n- View the upgrade guide [here](https://github.com/tyler-technologies-oss/forge/wiki/Forge-3.0-Upgrade-Guide).\\n- View the documentation [here](https://forge.tylerdev.io).\\n:::\\n\\n## Shout Outs\\n\\nWe\'d like to give a special shout out to the following who have contributed to this release in various ways:\\n\\n- **Sam Richardson:**\\n  We wouldn\'t have been able to make the progress we did without Sam\'s tireless work on refactoring many\\n  of the core components such as the text field, checkbox, radio, and switch. Sam is also responsible for\\n  many of the accessibility improvements that have been made in this release, and we\'re extremely grateful\\n  for his hard work. Sam has been a key contributor to Forge for many years, and we\'re lucky to have him on\\n  the team.\\n\\n- **Paul Lapczynski & Derek Moss**\\n  Documentation is always the most tedious and last thing to get done, but it\'s one of the most important\\n  aspects of any software project. Paul and Derek volunteered to help rebuild the Forge Storybook documentation\\n  site, and I\'m sure I can speak for them in saying that it was no small task. They did an amazing job, and we\'re\\n  hoping this new documentation site will be a valuable resource for developers going forward. More improvements\\n  to come!\\n\\n- **Rob Sturgill & Tyler McGowan:**\\n  Rob and Tyler were extremely helpful in the early stages of the theming and typography updates, as well as the\\n  introduction of design tokens. They directly influenced many of the great changes that were introduced in these\\n  areas, and were key to the success of these improvements.\\n  \\n  Rob also maintains the Forge Figma library for designers, and he has been keeping it up to date with the latest\\n  changes as 3.0 has progressed so that our designers and developers can stay in sync.\\n  \\n- **Nick Andrews, Paul Lapczynski, Ross Blakeney, Jonathan Earl, and Rob Jacobs:**\\n  These folks volunteered to help test various preview builds of Forge 3.0, and their feedback was invaluable\\n  in helping us identify and fix issues before the final release. Bugs in software are inevitable, but the work\\n  of these folks helped us to catch many of them early on.\\n\\n### Governance\\n\\nIn addition to these folks, we\'d also like to thank the Forge governance committees for their feedback on various\\ndesign and implementation decisions that were made in this release. We\'re hoping to strengthen the governance\\nprocess around Forge in the coming weeks, and we\'re looking forward to getting more folks involved in the\\ndecision making process.\\n\\n:::note Get involved!\\nIf you\'re interested in getting involved with Forge or joining the governance process to voice your opinion,\\nplease let us know!\\n:::\\n\\n## Accessibility Improvements\\n\\nWe\'ve made a concerted effort to improve the accessibility of Forge components. This effort included\\na full audit of our components, many structural adjustments, and a focus on ensuring that all components\\ncome with the necessary ARIA attributes and keyboard interactions while still allowing for customization\\nby developers when necessary.\\n\\nAccessibility is going to be a key focus for all of Tyler in the coming months, and we want to make sure that\\neveryone who uses Forge can do so with confidence that is is accessible to all users. The accessibility\\nlandscape is vast and complex, and we\'re committed to making sure that we\'re doing our part to make it\\neasier for developers to build accessible applications.\\n\\n:::note We need your help!\\nPlease let us know if you come across any accessibility issues. We\'ll do our best to address them as\\nquickly as possible. Accessibility issues are our top priority, and we want to make sure that we\'re\\ndoing everything we can to make Forge components accessible to all users. \\n:::\\n\\n## Material Dependency\\n\\nWe\'ve removed our dependency on Material in this release. This was a big step for us, and it allowed us\\nto make many improvements to the library that we wouldn\'t have been able to do otherwise. We\'re excited\\nto see how this change will allow us to move forward with new features and improvements in the future.\\n\\n## Theming System\\n\\nThe Forge theming system was lacking in many ways, partially due to the Material dependency. With the \\nremoval of Material, we are now able to provide Forge-named CSS variables for theming, and the core\\ntheming system across all components has been refactored for deep integration with these design tokens.\\n\\nView the [Theming](https://forge.tylerdev.io/main/?path=/docs/getting-started-theming--docs) docs for\\nmore information.\\n\\n## Typography\\n\\nWe\'ve introduced a uniform typography scale and a few new variations on our type styles. This should help\\ngive your design more consistency, and reduce confusion when choosing the right type style for your content.\\n\\nView the [Typography](https://forge.tylerdev.io/main/?path=/docs/getting-started-typography--docs) docs for\\nmore information.\\n\\n## Design Tokens\\n\\nDesign tokens are a new concept for Forge, and they are a key part of the theming and typography systems,\\namong other things. Design tokens are a way to define the core/primitive design values of our visual\\ndesign language in a way that can be shared across all components and design tools. This will allow us to\\nmake changes to our design language in a more consistent and maintainable way between design and development.\\n\\nDesign tokens allow for consistent design across all components, while enabling branding and customization \\nflexibility for those that need it without having to modify the core components. This is a big step forward\\nfor Forge, and we\'re excited to see how it can be utilized!\\n\\n:::note Use with Caution\\nIt\'s worth noting that design tokens enable great flexibility and consistency, but they also require careful\\nunderstanding about _when_ to use them. They should not be used to override the core design language of Forge\\ncomponents arbitrarily, but instead only when branding or customization is required.\\n:::\\n\\nView the [Design Tokens](https://forge.tylerdev.io/main/?path=/docs/design-tokens-introduction--docs) docs\\nfor more information.\\n\\n## Focus and Interaction States\\n\\nPrevious versions of Forge had a single state that was used for both focus and interaction feedback. This\\nwas implemented following Material\'s \\"ripple\\" pattern. In this release, we\'ve separated these states to allow for\\nthe focus state to act as a \\"ring\\" around the element, while the interaction state can be a more subtle effect\\nwhen hovered and pressed. This separation allows for improved accessibility and a more clear delineation between\\nfocus and interaction states.\\n\\n:::info Deep Integration\\nThe focus indicator and state layer components are now deeply integrated into all Forge components that offer\\nuser interaction. You will get this for free, but if you need to integrate these components into your own\\ncustom components, you can do so easily with by utilizing these new primitives.\\n:::\\n\\nView the [focus indicator](https://forge.tylerdev.io/main/?path=/docs/components-focus-indicator--docs) and\\n[state layer](https://forge.tylerdev.io/main/?path=/docs/components-state-layer--docs) docs for more information.\\n\\n## Usage Patterns\\n\\nOne of the initial driving factors for this release was to improve the usage patterns of various Forge components.\\nThe web is an ever evolving platform, and we want to make sure that Forge components are keeping up with the latest\\nfeatures and best practices.\\n\\n### Accessible Lists\\n\\nThe Forge list and list item components are core to many applications, and we\'ve made some updates to ensure that\\nthe can be used in a more accessible way, while still allowing for the flexibility that developers need.\\n\\nView the [List](https://forge.tylerdev.io/main/?path=/docs/components-list--docs) docs for more information.\\n\\n### Dialogs\\n\\nThe Forge dialog component has been completely rebuilt from scratch in this release. We\'ve made many improvements\\nto the component, most notably in how it uses the native `<dialog>` element.\\n\\nSee the [Dialog](https://forge.tylerdev.io/main/?path=/docs/components-dialog--docs) docs for more information.\\n\\n### Buttons and Form Controls\\n\\nThe Forge button, icon button, and floating action button components have been updated to use a new HTML structure.\\nThis new structure removes the need to supply a native `<button>` element as a child of the component. In addition\\nto this, the API for these components has been altered slightly to make them more consistent and easier to use.\\n\\nMuch the same as buttons, the Forge form control components checkbox, radio, and switch have been rewritten from the\\nground up and no longer require a native `<input>` element as a child. These elements will continue to participate\\nin HTML forms as expected.\\n\\nThese components themselves become the interactive and semantic elements, and this is a step in the right direction\\nfor improving Forge and making it easier to use.\\n\\n:::note Future\\nThis pattern of removing the need to supply a native element as a child of the component is something we\'re looking\\nto do across other Forge components in the future such as the text field. This will make using Forge more concise and\\neasier to understand by reducing confusion about which elements to interact with.\\n:::\\n\\n### Overlay\\n\\nWe\'ve introduced a new \\"overlay\\" primitive that can be used to create floating elements such as popovers, tooltips,\\ntoasts, etc. This new primitive is a key part of all elements that show dropdowns or other floating content\\non your page. It\'s a simple component, but it\'s a powerful one! This new implementation is built on top of the \\nnew [Popover API](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API) in the browser.\\n\\nView the [Overlay](https://forge.tylerdev.io/main/?path=/docs/components-overlay--docs) docs for more information.\\n\\n## How do I upgrade?\\n\\nAlright, let\'s get to the details! We\'ve done our best to make the upgrade process as smooth as possible,\\nbut there are some breaking changes that you should be aware of. We\'ve documented the process on the Forge\\nGitHub wiki, and we\'re here to help if you run into any issues.\\n\\nView the [Forge 3.0 Upgrade Guide](https://github.com/tyler-technologies-oss/forge/wiki/Forge-3.0-Upgrade-Guide).\\n\\n### Upgrade Utility\\n\\nThe Forge upgrade utility has been revamped to help you migrate your application to Forge 3.0. We know that\\nupgrading to a new version of a UI library can be a daunting task, and we wanted to make an attempt at improving\\nthis process. The upgrade utility for Forge 3.0 is designed to help you automate as much of the upgrade process\\nas possible.\\n\\n:::note Feedback is Welcome!\\nIf you run into any issues with the upgrade utility, find any breaking changes that aren\'t documented or upgraded\\ncorrectly, or have any other feedback on the upgrade process, please let us know!\\n:::\\n\\n## What\'s New?\\n\\nAlong with the various breaking changes, we\'ve also introduced many new features and improvements in Forge 3.0 that\\nwe think you\'ll love. Please review the full list of changes in detail to make sure you don\'t miss out on anything!\\n\\nHere is a list of some of the key highlights:\\n\\n- Buttons no longer require a native `<button>` element as a child\\n  - The button and icon button also offer more variants for different use cases\\n- Checkboxes and radios no longer require a native `<input>` element as a child\\n- Button toggles have received a design update to reduce emphasis\\n- A new `<forge-split-button>` component has been introduced to facilitate implementing the split button design pattern\\n- Dialogs have been completely rebuilt from scratch using the native `<dialog>` element\\n- Popups have been renamed to popover and have been updated to use the new overlay primitive\\n- Tabs have been rewritten from scratch for improved accessibility\\n- The slider has been rewritten from scratch and should now be more stable and accessible\\n- The list and list item components now require a new HTML structure for improved accessibility and more flexible usage\\n- Expansion panels no longer use JavaScript-based animations\\n- Tooltips received a minor design update to improve contrast and readability\\n- The text field and select components now share the same underlying `<forge-field>` element for consistency\\n  - These components now also allow for labels outside of the field as well via the `labelPosition` property.\\n\\nThis is only scratching the surface! There are many more smaller features that have been introduced in this\\nrelease, and the upgrade guide will help you understand how to take advantage of them.\\n\\n:::info\\nForge 3.0 is **not** a visual overhaul, but a modernization of the library. We\'ve made many improvements under the hood\\nthat will affect how you use Forge, but the visual appearance of the components should remain largely the same aside\\nfrom a few small tweaks here and there.\\n:::\\n\\nView the full list of changes [here](https://github.com/tyler-technologies-oss/forge/wiki/Forge-3.0-Upgrade-Guide).\\n\\n## Backwards Compatibility\\n\\nForge 3.0 is a major release, and as such there are some breaking changes to be aware of.\\n\\nWe\'ve done our best to document these changes [here](https://github.com/tyler-technologies-oss/forge/wiki/Forge-3.0-Upgrade-Guide),\\nbut if there are things that we missed, or if you run into any issues, please let us know so that we can address them\\nas quickly as possible.\\n\\n:::info Please report any issues you find!\\nWe\'re committed to making sure that Forge 3.0 is as stable and reliable as possible. If you run into any issues,\\nplease let us know so that we can address them as quickly as possible. We\'re here to help!\\n:::\\n\\n## Contribution\\n\\nWe\'re always looking for ways to improve Forge, and we\'re open to contributions from the community. If you have\\nan idea for a new feature, or if you\'ve found a bug that you\'d like to fix, please let us know!\\n\\nPlease use the following resources to get involved:\\n\\n### GitHub Issues\\n\\nIf you find a bug in Forge, or if you have an idea for a new feature, please open an issue on the\\n[Forge GitHub](https://github.com/tyler-technologies-oss/forge/issues).\\n\\n### Pull Requests\\n\\nIf you\'d like to contribute to Forge, please open a pull request on the [Forge GitHub](https://github.com/tyler-technologies-oss/forge/pulls).\\nWe\'re always looking for ways to improve the library, and we\'re open to contributions from the community.\\n\\n:::info Forking the Repo\\nIf you\'d like to contribute to Forge, please fork the repo first and open a pull request with your changes.\\n:::\\n\\n### Canny\\n\\nWe\'ve introduced a new Canny board for feature requests and feedback. If you have an idea for a new feature,\\nplease create a new post on the Canny board so that we can track it, vote on it, and prioritize it accordingly.\\n\\nView the [Forge Canny board](https://tylerforge.canny.io/feature-requests) for more information.\\n\\n### RFC Process\\n\\nWe\'re introducing a new RFC (Request for Comments) process for proposing new features and changes to Forge. This\\nprocess is designed to make it easier for developers to contribute to Forge, and to ensure that all changes are\\nthoroughly reviewed before they are implemented. If you\'re interested in making Forge better, please consider\\nparticipating in the RFC process!\\n\\n### Documentation\\n\\nWe\'re always looking for ways to improve the Forge documentation. If you have an idea for a new demo, find a\\ntypo in the documentation, or find something confusing that needs more context, please let us know so that we\\ncan address it.\\n\\nWe\'re still in the process of updating and improving the Forge documentation, and we will continue to do so gradually\\nover the coming weeks. If you have any feedback on the new documentation site, please let us know!\\n\\n## What\'s Next?\\n\\nWe\'re excited to see what you build with Forge 3.0! We\'ve got many plans to introduce new features and improvements\\nover the coming months, and we\'re looking forward to sharing them with you as they become available.\\n\\nSee the [roadmap](https://forge.tylerdev.io/main/?path=/docs/about-roadmap--docs) to stay up to date with what\'s coming next for Forge.\\n\\n### TCW 1.x End of Life\\n\\nWith the release of Forge 3.0, we\'re also announcing the end of life for TCW 1.x effective as of 6/10/2024. We know that many\\nof you have been using TCW 1.x for a long time, and we know it\'s not a trivial task to upgrade to Forge 3.0. TCW 1.x was a step in\\nthe right direction, but it has many limitations and core flaws, and we\'ve addressed many (if not all) of these between\\nForge 2.x and 3.x.\\n\\n**Please try to get an upgrade plan in place on your roadmap as soon as possible.**\\n\\n:::info Automated Upgrade\\nThe Forge upgrade utility is designed to help automate as much of the upgrade process as possible. When upgrading from\\nTCW 1.x to Forge 3.0, you\'ll need to upgrade to Forge 2.x **first**, and then to Forge 3.0. **There is not a direct migration\\npath in the utility for the direct jump to 3.0**.\\n\\nSee the [Forge 2.x upgrade guide](/blog/2022/05/02/upgrade-guide-forge-2) for more information.\\n\\nPlease use [this tool](https://github.com/tyler-technologies/forge-upgrade) to help you migrate your applications and\\nlibraries to Forge 3.0, and reach out to us if you have any questions or need assistance.\\n:::\\n\\n### What\'s happening to Forge 2.x?\\n\\nForge 2.x will continue to be maintained for the foreseeable future, but we will not be adding any new features or\\nimprovements to it. We recommend that you upgrade to Forge 3.0 as soon as possible to take advantage of the latest\\nchanges.\\n\\nWe want to eventually reach the point where we can push out new features and improvements to Forge on a more regular\\nbasis without breaking your code. The faster we can get everyone on the same version, the faster we can achieve this\\ngoal.\\n\\n:::note Legacy Documentation\\nYou can now view the legacy Forge 2.x Storybook documentation [here](https://forge.tylerdev.io/version-2).\\n:::\\n\\n### Goals\\n\\nAs we continue to evolve Forge, we have a few key goals in mind:\\n\\n- Solidify APIs, usage patterns, and implementation to reduce breaking changes in future versions. We want to get\\n  to a point where you can upgrade Forge easily with confidence that your application will continue to work as expected.\\n\\n- Improve accessibility across all components. This is a key focus for us, and we want to make sure that all Forge\\n  components are accessible to all users.\\n\\n- Introduce new components and features that make it easier to build applications with Forge. We\'re always looking\\n  for ways to improve the developer experience, and we\'re excited to see what new features we can introduce in the\\n  near future.\\n\\n- Cultivate a strong community around Forge. We want to make sure that developers have the resources they need to\\n  build amazing applications with Forge, and we\'re always open to contribution and feedback from the community.\\n\\n### Conclusion\\n\\nWe know many of you have been waiting a long time for this release, and we\'re extremely grateful for your patience\\nand support. We had originally intended for this project to be released much sooner, but due to the complexity of\\nthe changes that were made, many roadblocks along the way, and the sheer amount of work that needed to be done, we\\nended up taking a bit longer but we\'re extremely happy with where we ended up.\\n\\nWe hope the upgrade process goes smoothly for you, and we\'re here to help if you run into any issues. We\'re excited\\nto see what you build with Forge 3.0, and we\'re looking forward to sharing more updates with you in the coming months!\\n\\nAlright, that\'s all for now. Thanks for reading, and happy coding! \ud83d\ude80"},{"id":"/2024/04/02/forge-3-coming-soon","metadata":{"permalink":"/blog/2024/04/02/forge-3-coming-soon","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2024-04-02-forge-3-coming-soon/index.md","source":"@site/blog/2024-04-02-forge-3-coming-soon/index.md","title":"Forge 3.0 - Coming Soon","description":"A brief update on the status of Forge 3.0 components.","date":"2024-04-02T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"components","permalink":"/blog/tags/components"}],"readingTime":6.145,"hasTruncateMarker":true,"authors":[{"name":"Kieran Nichols","title":"Software Architect","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols","page":null}],"frontMatter":{"title":"Forge 3.0 - Coming Soon","description":"A brief update on the status of Forge 3.0 components.","authors":["kieran.nichols"],"tags":["forge","components"]},"unlisted":false,"prevItem":{"title":"Forge 3.0 is now available!","permalink":"/blog/2024/06/10/forge-3-generally-available"},"nextItem":{"title":"Adopting Container Queries","permalink":"/blog/2023/05/05/adopting-container-queries"}},"content":"As we near completion of development work on Forge 3.0, we wanted to give everyone a brief update about\\nwhat this next major version is, what you can expect from it, and when you can start using it. We know\\nmany of you are eager to get your hands on it, and hopefully this post will help answer any questions\\nyou may have.\\n\\n\x3c!-- truncate --\x3e\\n\\nWe\'re really excited about this version and a lot of work has gone into it. It has been a long time coming,\\nwith many delays and roadblocks along the way, but we\'re really looking forward to sharing it with everyone\\nvery soon!\\n\\n:::info TL;DR\\nForge 3.0 is a major update that improves accessibility, introduces design tokens, and provides improved\\ndeveloper usage patterns. It no longer depends directly on Material and introduces inline usage of\\n\\"floating\\" elements. The upgrade will focus on backwards compatibility, but some components and APIs will\\nbe removed or deprecated. We are looking to sunset TCW 1.x when Forge 3.0 is released. Early adopters are\\nwelcome to try Forge 3.0. Stay tuned for more updates!\\n:::\\n\\n## Why Forge 3.0?\\n\\nBefore we answer the burning question that everyone has been asking about regarding the release date for Forge\\n3.0, let\'s discuss _why_ we\'re creating this version and how everyone will benefit from it.\\n\\nLet\'s first take a look at where we came from to help frame where we\'re going:\\n\\n### TCW 1.x\\n\\nThe first iteration of Forge components. It was initially a very strict set of UI components that didn\'t allow\\nfor much visual flexibility, it needed to support IE 11 and ES5, and it was the first pass for Tyler as a\\ncompany to try to align on a design system to improve our consistency and cohesiveness across products. It worked,\\nit had its shortcomings, but it was a great step in the right direction and served as a learning experience for everyone.\\n\\n:::info Goodbye TCW...\\nWe are planning to officially sunset TCW when Forge 3.0 is released.\\n\\nWhile TCW has been deprecated for quite some time, this won\'t be immediate...\\nWe\'ll announce a plan and timeline to allow for this transition, and we\'re always\\navailable to assist teams that have questions/concerns about the upgrade process.\\n:::\\n\\n### Forge 2.x\\n\\nThis was a stepping stone version that was all about rebranding from TCW to Forge so that we have an official\\nimplementation for our design system. We understand that it was a disruption for everyone to have to migrate from\\nTCW to Forge, along with the various breaking API changes we introduced during that effort. We\'re focusing more on\\nthe types of breaking changes we introduce this time around. We had many more plans/ideas we wanted to introduce with\\n2.0, but we decided to defer those to a future release.\\n\\n### Forge 3.0\\n\\nFast forward to today and we\'re on to that next phase. Forge 3.0 is a modernization of the library with a deep focus on\\naccessibility, design tokens, and developer usage pattern updates to take advantage of new browser APIs. This version\\ncompletes most of the plans we envisioned for Forge 2.\\n\\n## What is Forge 3.0?\\n\\nAt a high level, Forge 3.0 is the following:\\n\\n- No longer directly depends on Material\\n- Fixes critical accessibility issues\\n- Allows for inline usage of \u201cfloating\u201d elements (tooltips, dialogs, popovers... etc.)\\n- Introduces design tokens to better support branding requirements\\n- Fixes the core theming system\\n- Provides a new and improved typography scale\\n- Separates the focus state from the interaction\xa0(hover, pressed) states\\n- Removes unnecessary global styles\\n- Reduces and improves setup requirements\\n- Pays down technical debt\\n- Uses modern browser APIs\\n- Improves performance\\n\\nMore details about these items will be provided in the full 3.0 upgrade guide to come upon release, but these changes affect every\\ncomponent in the library in one way or another.\\n\\nAs mentioned above, we are trying to better support backwards compatibility as much as we can this time around. This means that\\ncertain components and APIs are going to be deprecated in favor of new patterns with a plan to remove them in a future version.\\nHopefully this will allow you to upgrade to 3.0 without it causing a major disruption and gradually update your applications on your\\nown timeline.\\n\\nWe will also be updating the Forge upgrade utility with any necessary automation that we can provide to assist (as well as making\\nit easier to install/use). There will of course be some breaking changes as with any major version release, but we\'re doing our best\\nto reduce the upgrade friction as much as we can.\\n\\n## When will Forge 3.0 be released?\\n\\nWe\'ve been intentionally quiet on this topic due to delays, resourcing, and unexpected road blocks that just took more time to solve\\nthan we anticipated... We didn\'t want to commit to a timeline that we couldn\'t deliver on, and while we don\'t have an exact release\\ndate to announce, we are getting very close to being done. We are looking for early adopters that are willing to use Forge 3.0 and help\\nus work out any final kinks and finalize the upgrade utility.\\n\\n:::info Get Involved!\\nIf you\'re interested in becoming an early adopter please let us know!\\n\\nThis part of the process is very important as it will help us identify which areas are causing upgrade problems, as well as ensure\\nthat we can fix any bugs that show up in more real world usages.\\n:::\\n\\nWe still have a lot more work to do before release to sweep various changes across the library, testing, updating documentation,\\nand sweeping the framework adapter libraries. Things should come together fairly quickly over the next few weeks to a month so stay\\ntuned for another announcement!\\n\\n## Future\\n\\nForge 3.0 opens the door for many new components & patterns to be built, and providing new patterns for using existing components.\\nVarious components have already been refactored to utilize these new tools/patterns, where others will require more careful planning\\nand research first.\\n\\nFor example, now that we can reliably provide inline usage of the `<forge-popover>` (renders above everything else, but lives in the\\nDOM where it is defined), we have the ability to re-imagine elements such as the `<forge-select>` and `<forge-menu>` (any element that\\npresents a dropdown essentially) so that developers are no longer required to use JavaScript to provide custom content! This is something\\nwe are very excited about, and while it won\'t make it into the initial 3.0 release due to time constraints, we are planning to provide\\nthese new components in a feature release later this year.\\n\\nWhile building 3.0 we have already started to gather a list of items that would make sense for a 4.0 release. These are things that would\\neither be too much of a disruption to the ecosystem to introduce right now, or because we\'re waiting on new browser APIs to allow us\\nto provide a better implementation in the future. If you have any ideas, please feel free to pass them along!\\n\\n:::info Feature Requests\\nFor anyone who missed the announcement earlier this year, we are now using a tool called Canny to allow for everyone to request\\nnew features and vote/comment on existing requests. Please use Canny to help bring your ideas for Forge to life!\\n\\nhttps://tylerforge.canny.io/feature-requests\\n:::"},{"id":"/2023/05/05/adopting-container-queries","metadata":{"permalink":"/blog/2023/05/05/adopting-container-queries","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-05-05-adopting-container-queries/index.md","source":"@site/blog/2023-05-05-adopting-container-queries/index.md","title":"Adopting Container Queries","description":"As we move more and more toward responsive design there has been increasing interest in CSS container queries. For those of us who aren\u2019t on the cutting edge of CSS development, container queries are a new feature that allows us to apply styles based on a containing element\u2019s dimensions. This is conceptually similar to typical media queries, which are based instead on the qualities of the viewport as a whole.","date":"2023-05-05T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"css","permalink":"/blog/tags/css"},{"inline":true,"label":"responsive design","permalink":"/blog/tags/responsive-design"}],"readingTime":3.305,"hasTruncateMarker":true,"authors":[{"name":"Sam Richardson","title":"Senior Front End Software Engineer","url":"https://github.com/samrichardsontylertech","imageURL":"https://github.com/samrichardsontylertech.png","key":"sam.richardson","page":null}],"frontMatter":{"title":"Adopting Container Queries","decription":"Use container queries in your code with a fallback for unsupported browsers.","authors":["sam.richardson"],"tags":["forge","css","responsive design"]},"unlisted":false,"prevItem":{"title":"Forge 3.0 - Coming Soon","permalink":"/blog/2024/04/02/forge-3-coming-soon"},"nextItem":{"title":"Enhanced Angular Integration","permalink":"/blog/2023/03/22/angular-proxies"}},"content":"As we move more and more toward responsive design there has been increasing interest in CSS container queries. For those of us who aren\u2019t on the cutting edge of CSS development, container queries are a new feature that allows us to apply styles based on a containing element\u2019s dimensions. This is conceptually similar to typical [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries), which are based instead on the qualities of the viewport as a whole.\\n\\n\x3c!-- truncate --\x3e\\n\\nIt\u2019s easy to see how container queries can make developing flexible layouts easier. The classic demonstration is a single card component that renders differently based on where it is on the page. There\u2019s been enough written on it before that there\'s no need to repeat here, but check out [this older but still relevant example](https://ishadeed.com/article/say-hello-to-css-container-queries/), [this writeup in Smashing Magazine](https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries/), and [MDN\u2019s docs](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries) for great, in-depth examples.\\n\\nNow is a great time to start incorporating container queries into your code. However, this is still a very recent addition to browsers (supported in Firefox as of February 2023 and other major browsers from September 2022) so it\u2019s smart to set a fallback for users still on older versions.\\n\\nWe can use the `ForgeResizeObserver` as that fallback. `ForgeResizeObserver` is a performant utility written around the native [Resize Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API) that notifies us whenever an observed element\u2019s dimensions change.\\n\\n:::info\\nView [the `ForgeResizeObserver` source code here](https://github.com/tyler-technologies-oss/forge-core/blob/main/src/resize/resize-observer.ts).\\n:::\\n\\nLet\'s set up a function to handle this. First, we check to see whether the user agent supports container queries.\\n\\n```ts\\nfunction checkSupportsContainerQueries(): void {\\n    if (CSS.supports(\'container-type\', \'inline-size\')) {\\n        return;\\n    }\\n}\\n```\\n\\nIf it doesn\u2019t, we pass in the the container element and register it with the ResizeObserver, setting up a callback function to toggle a class on it when it crosses our breakpoint. Be sure to import `ForgeResizeObserver` from `@tylertech/forge-core`.\\n\\n```ts\\nimport { ForgeResizeObserver } from \'@tylertech/forge-core\';\\n\\nfunction checkSupportsContainerQueries(el: HTMLElement): void {\\n    if (CSS.supports(\'container-type\', \'inline-size\')) {\\n        return;\\n    }\\n\\n    ForgeResizeObserver.observe(el, entry => {\\n        // Set a 600px breakpoint\\n        const isSmall = entry.contentRect.width < 600;\\n        el.classList.toggle(\'small\', isSmall);\\n    });\\n}\\n```\\n\\nYou might also want to debounce the callback if performance is a concern.\\n\\n```ts\\nimport { debounce, ForgeResizeObserver } from \'@tylertech/forge-core\';\\n\\nfunction checkSupportsContainerQueries(el: HTMLElement): void {\\n    if (CSS.supports(\'container-type\', \'inline-size\')) {\\n        return;\\n    }\\n\\n    ForgeResizeObserver.observe(el, entry => {\\n        // Run once then wait 100 milliseconds between executions\\n        debounce(() => {\\n            const isSmall = entry.contentRect.width < 600;\\n            el.classList.toggle(\'small\', isSmall);\\n        }, 100, true)\\n    });\\n}\\n```\\n\\nIn the CSS we simply apply the same styles to this class that we use within the container query.\\n\\n```scss\\n@mixin small-container-styles() {\\n    // Styles to apply when the container is narrow\\n}\\n\\n.container {\\n    &.small {\\n        @include small-container-styles;\\n    }\\n\\n    @container (inline-size < 600px) {\\n        @include small-container-styles;\\n    }\\n}\\n```\\n\\nTo avoid memory leaks it\u2019s necessary to clean up the ResizeObserver when the targeted element leaves the DOM. This is simple if your app uses Angular, just call `ForgeResizeObserver.unobserve()` in your component\u2019s ngOnDestroy lifecycle method.\\n\\n```ts\\n@Component({})\\nclass SomeComponent implements OnDestroy {\\n    el: HTMLElement;\\n\\n    ngOnDestroy(): void {\\n        ForgeResizeObserver.unobserve(this.el);\\n    }\\n}\\n```\\n\\nA full Angular component that treats a host element as the container could be written like this.\\n\\n```ts\\nimport { debounce, ForgeResizeObserver } from \'@tylertech/forge-core\';\\n\\n@Component({})\\nexport class SomeComponent implements OnInit, OnDestroy {\\n    constructor(private _el: ElementRef<HTMLElement>, private _renderer: Renderer2) {}\\n\\n    ngOnInit(): void {\\n        this._checkSupportsContainerQueries();\\n    }\\n\\n    ngOnDestroy(): void {\\n        ForgeResizeObserver.unobserve(this._el.nativeElement);\\n    }\\n\\n    private _checkSupportsContainerQueries(): void {\\n        if (CSS.supports(\'container-type\', \'inline-size\')) {\\n            return;\\n        }\\n\\n        ForgeResizeObserver.observe(el, entry => {\\n            debounce(() => {\\n                const isSmall = entry.contentRect.width < 600;\\n                el.classList.toggle(\'small\', isSmall);\\n            }, 100, true)\\n        });\\n    }\\n}\\n```\\n\\n:::info\\nTyler Angular Core also exposes an Angular-specific `ResizeObserverDirective`, but since that can\'t be easily attached conditionally the frame agnostic `ForgeResizeObserver` is preferable in this case.\\n\\nLearn [more about the directive here](https://github.com/tyler-technologies/tyler-angular-core/blob/main/projects/core/src/lib/directives/resize-observer/README.md).\\n:::\\n\\nWith this code in place, your users can enjoy a more fluid UI regardless of how up to date their browser is. Of course, this is just one way to use the ResizeObserver. Chances are you\u2019ll run into other scenarios where these tools may be helpful."},{"id":"/2023/03/22/angular-proxies","metadata":{"permalink":"/blog/2023/03/22/angular-proxies","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-03-22-angular-proxies/index.md","source":"@site/blog/2023-03-22-angular-proxies/index.md","title":"Enhanced Angular Integration","description":"The Angular framework does a \\"pretty good\\" job of working with Web Components out of the box, but having to use CUSTOMELEMENTSSCHEMA weakens template type-checking overall, can mask errors, and doesn\'t provide any autocomplete or IntelliSense.  As of v2.1.0 of the @tylertech/forge-angular library, however, released in November 2022, it\'s no longer necessary to specify the schema, and if you import the associated modules, Forge components can be used as though they were Angular components!","date":"2023-03-22T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"angular","permalink":"/blog/tags/angular"},{"inline":true,"label":"custom-elements","permalink":"/blog/tags/custom-elements"},{"inline":true,"label":"web-components","permalink":"/blog/tags/web-components"}],"readingTime":8.36,"hasTruncateMarker":true,"authors":[{"name":"Mike Matuszak","title":"Front End Architect","url":"https://github.com/mikematusz","imageURL":"https://github.com/mikematusz.png","key":"mike.matuszak","page":null}],"frontMatter":{"title":"Enhanced Angular Integration","decription":"Using Forge components in Angular without CUSTOM_ELEMENTS_SCHEMA.","authors":["mike.matuszak"],"tags":["forge","angular","custom-elements","web-components"]},"unlisted":false,"prevItem":{"title":"Adopting Container Queries","permalink":"/blog/2023/05/05/adopting-container-queries"},"nextItem":{"title":"Split View Component","permalink":"/blog/2023/02/10/split-view-component"}},"content":"The Angular framework does a \\"pretty good\\" job of working with Web Components out of the box, but having to use `CUSTOM_ELEMENTS_SCHEMA` weakens template type-checking overall, can mask errors, and doesn\'t provide any autocomplete or IntelliSense.  As of v2.1.0 of the `@tylertech/forge-angular` library, however, released in November 2022, it\'s no longer necessary to specify the schema, and if you import the associated modules, Forge components can be used as though they were Angular components!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Proxy Components\\n\\nThere are a few moving parts, but the piece that actually enables the integration are Angular `@Component()` definitions that mirror the Forge Web Components without introducing any new DOM elements, which we\'re calling Proxy Components.  They provide just enough definition for Angular to recognize the component, and then do everything they can to get out of the way.  These components are all generated, so they can be more automatically kept up to date.  We\'ll get into more detail about how that works later on in this post.  Here\'s a simple example of a proxy component:\\n\\n```ts\\n@Component({\\n  selector: \'forge-radio\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  template: \'<ng-content></ng-content>\'\\n})\\nexport class RadioComponent {\\n\\n\\t/** Gets/sets whether the radio button is dense. */\\n\\t@Input()\\n\\tpublic set dense(value: RadioComponentCustomElement[\'dense\'] | string) {\\n\\t\\tthis.zone.runOutsideAngular(() => {\\n\\t\\t\\tthis.elementRef.nativeElement.dense = value != null && `${value}` !== \'false\';\\n\\t\\t});\\n\\t}\\n\\n\\tpublic get dense(): RadioComponentCustomElement[\'dense\'] {\\n\\t\\treturn this.elementRef.nativeElement.dense;\\n\\t}\\n\\n\\n\\tpublic syncCheckedState(...args: Parameters<RadioComponentCustomElement[\'syncCheckedState\']>): ReturnType<RadioComponentCustomElement[\'syncCheckedState\']> {\\n\\t\\treturn this.zone.runOutsideAngular(() => this.elementRef.nativeElement.syncCheckedState(...args));\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tchangeDetectorRef: ChangeDetectorRef,\\n\\t\\tprotected elementRef: ElementRef<RadioComponentCustomElement>,\\n\\t\\tprotected zone: NgZone\\n\\t) {\\n\\t\\tdefineRadioComponent();\\n\\t\\tchangeDetectorRef.detach();\\n\\t}\\n}\\n```\\n\\nAs you can see by the selector, the Forge web component itself *is* the Angular component.  It has an `@Input()` for each public property of the Forge component, and a public method for each public method of the component.  And that\'s basically it.  It mirrors the types directly from the Forge type definitions, along with any JSDoc, and minimizes Angular\'s footprint by calling `runOutsideAngular` and `changeDetectorRef.detach()` along with `onPush` change detection.\\n\\nNote also the boolean coercion for the `density` property, so that `dense=\\"true\\"` or even just `dense` still works and you don\'t need `[dense]=\\"true\\"`. The intention is that a template that was valid with `CUSTOM_ELEMENTS_SCHEMA` should also work without it using the proxy components.\\n\\nYou may wonder why there aren\'t any `@Output()` properties, but they\'re actually not necessary at all because the Forge library provides typings for `HTMLElementEventMap`.  This means that they\'re already strongly typed and support auto-suggest, and since Angular has built-in support for native events, it\'s better to treat them as such because it supports bubbling.  The way Forge was already working was optimal, so we didn\'t want the proxy components to get in the way.\\n\\nLastly, the component constructor invokes the `defineRadioComponent()` method, removing the need to call that explicitly in the application.  In the most recent version, this is also done in the module constructor, to account for components that are rendered dynamically, e.g. by calling `document.createElement(\'forge-button\')`.  Prior to v2.5.0, that would still require the application to ensure the custom element is defined.  We have also added these `define` calls to singleton services that show Forge components, such as `DialogService` and `ToastService`.\\n\\n## Application Usage\\n\\n> A summary of the process is also noted in the [Forge v2.1.0 release notes](https://github.com/tyler-technologies-oss/forge-angular/releases/tag/v2.1.0) and [Framework Usage Guide](https://forge.tylerdev.io/main/?path=/docs/guides-framework-usage--page) on Storybook.\\n\\nIdeally, you should be able to import the necessary modules for components in your templates (e.g. `ForgeRadioModule`), remove `CUSTOM_ELEMENTS_SCHEMA` and the `define***Element()` calls, and it will just work.  Or if there are any compilation errors, they\'ll represent actual issues with the correctness of the template.  As we\'ve rolled this out in a number of apps, it has certainly turned up a number of very real defects that were obscured by `CUSTOM_ELEMENTS_SCHEMA`, but for the most part required very few changes.  The most common case where stricter typing caused a problem was providing an object to a boolean property, essentially using whether it was defined to determine truthiness, which can be coerced using `!!`.  Angular also allows the use of `$any()` to override usages that may not satisfy TypeScript, but you know are correct and want to defer or avoid changing them at the current time.\\n\\nThe easiest way to do this is usually to go module-by-module, remove `CUSTOM_ELEMENTS_SCHEMA`, and import the modules for each Forge web component used in the templates of components until they compile.  Then remove the `define***Element()` calls.\\n\\nIn Forge 2.0 we decided to make this entirely opt-in, to prevent upgrading a minor version of the `forge-angular` from behaving like a breaking change with stricter type-checking.  So, where the `forge-angular` library already provides modules for value accesor directives, for now you\'ll need to import a separate `Forge*ProxyModule` for those components.  In the future, most likley Forge 3.0, we intend to combine these so you get both the Proxy Component and value accesor in the same module.\\n\\nAlso, as much as possible, we\'ve tried to roll up components that are always used together into the parent module.  For example, if you import `ForgeListModule`, it will provide proxy components for both `<forge-list>` and `<forge-list-item>`.  This is purely intended as a conveninence, and `ForgeListItemModule` still exists independently.\\n\\nThere is also a `ProxyComponentsModule` that includes all proxy components, similar to how `ForgeModule` contains all the value accessor modules.  Importing individual modules will provide better tree-shaking and is preferred, but if you were already using the roll-up module this will provide a similar experience in cases where the optimization isn\'t necessary.\\n\\nConsider the following template from the `forge-angular` demo app, which will not need to change at all.:\\n\\n```html\\n<forge-button type=\\"raised\\">\\n\\t<button id=\\"tooltip-demo-btn\\">Hover me</button>\\n</forge-button>\\n<forge-tooltip #tooltip target=\\"#tooltip-demo-btn\\" [text]=\\"text\\" [position]=\\"position\\" [delay]=\\"delay\\"></forge-tooltip>\\n<forge-text-field>\\n\\t<input type=\\"text\\" id=\\"tooltip-text\\" [(ngModel)]=\\"text\\" />\\n\\t<label for=\\"tooltip-text\\">Text</label>\\n</forge-text-field>\\n<forge-text-field>\\n\\t<input type=\\"number\\" id=\\"tooltip-delay\\" [(ngModel)]=\\"delay\\" />\\n\\t<label for=\\"tooltip-delay\\">Delay (ms)</label>\\n</forge-text-field>\\n<forge-select id=\\"tooltip-position\\" label=\\"Position\\" [(ngModel)]=\\"position\\">\\n\\t<forge-option value=\\"top\\">Top</forge-option>\\n\\t<forge-option value=\\"right\\">Right</forge-option>\\n\\t<forge-option value=\\"bottom\\">Bottom</forge-option>\\n\\t<forge-option value=\\"left\\">Left</forge-option>\\n</forge-select>\\n<forge-checkbox>\\n\\t<input id=\\"tooltip-builder\\" type=\\"checkbox\\" [(ngModel)]=\\"useBuilder\\" (change)=\\"onUseBuilderChanged($event)\\" />\\n\\t<label for=\\"tooltip-builder\\">Use Builder</label>\\n</forge-checkbox>\\n<forge-tooltip delay=\\"500\\" text=\\"Provides a builder function to render an HTML element in the tooltip instead of just text.\\"></forge-tooltip>\\n```\\n\\nThe original module file called `define` for each component, specified `CUSTOM_ELEMENTS_SCHEMA` and also was using the `ForgeSelectModule` for the `[(ngModel)]` binding on the `<forge-select>` element.\\n\\n```ts\\ndefineButtonComponent();\\ndefineTooltipComponent();\\ndefineTextFieldComponent();\\ndefineCheckboxComponent();\\ndefineSelectComponent();\\n\\n@NgModule({\\n  declarations: [TooltipComponent],\\n  imports: [\\n    CommonModule,\\n    TooltipRoutingModule,\\n    FormsModule,\\n    SharedModule,\\n    ForgeSelectModule\\n  ],\\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\\n})\\nexport class TooltipModule { }\\n```\\n\\nThis was changed to the following:\\n\\n```ts\\n@NgModule({\\n  declarations: [TooltipComponent],\\n  imports: [\\n    CommonModule,\\n    TooltipRoutingModule,\\n    FormsModule,\\n    SharedModule,\\n    ForgeButtonModule,\\n    ForgeCheckboxModule,\\n    ForgeSelectModule,\\n    ForgeSelectProxyModule,\\n    ForgeTextFieldModule,\\n    ForgeTooltipModule\\n  ]\\n})\\nexport class TooltipModule { }\\n```\\n\\nNote that we had to import both `ForgeSelectModule` and `ForgeSelectProxyModule`, and also that we did not need to import `ForgeOptionModule` for the `<forge-option>` usages because the `ForgeSelectModule` already re-exports that.\\n\\n## Generating the Proxy Components\\n\\nIn order to ensure the components could be kept up to date with the latest changes in Forge with minimal effort, the components are generated using the Angular Schematics in the [`forge-schematics`](https://github.com/tyler-technologies-oss/forge-schematics) repository.  For the most part, the process of updating `forge-angular` to reflect changes in `forge` is just:\\n\\n```sh\\nnpm i @tylertech/forge@latest\\nnpm run generate-proxies\\n```\\n\\nThis will update existing components, generate proxy components for any new ones added (such as the recent `forge-split-view`) and even create modules where they don\'t exist.  For new components, it\'s currently still a manual process to update `index.ts` files and add them to `ProxyComponentsModule`.  It may also be desirable to add a demo to the app in order to exercise the types and showcase their usage.  Eventually we may automate the creation of a PR when new versions of Forge are published.\\n\\nIf you want to add an additional relationship to have one component\'s module export another as a convenience, such as only needing to import `ForgeSplitViewModule` and also be able to automatically use `forge-split-view-panel` in your template, these can be configured in the `generate-proxies.json` file, before running the above command, by adding to `componentDependencies`:\\n\\n```json\\n{\\n    \\"manifest\\": \\"node_modules/@tylertech/forge/custom-elements.json\\",\\n    \\"importPath\\": \\"@tylertech/forge\\",\\n    \\"exclude\\": \\"\\",\\n    \\"outDir\\": \\"projects/forge-angular/src/lib\\",\\n    \\"outDirExcludePrefix\\": \\"forge-\\",\\n    \\"modulePrefix\\": \\"Forge\\",\\n    \\"useDefineFunction\\": true,\\n    \\"componentDependencies\\": {\\n        \\"forge-accordion\\": [\\"forge-expansion-panel\\"],\\n        \\"forge-button-toggle-group\\": [\\"forge-button-toggle\\"],\\n        \\"forge-chip-field\\": [\\"forge-chip\\"],\\n        \\"forge-chip-set\\": [\\"forge-chip\\"],\\n        \\"forge-expansion-panel\\": [\\"forge-open-icon\\"],\\n        \\"forge-icon-button\\": [\\"forge-icon\\"],\\n        \\"forge-list\\": [\\"forge-list-item\\"],\\n        \\"forge-select\\": [\\"forge-option\\"],\\n        \\"forge-split-view\\": [\\"forge-split-view-panel\\"],\\n        \\"forge-stepper\\": [\\"forge-step\\"],\\n        \\"forge-tab-bar\\": [\\"forge-tab\\"],\\n        \\"forge-view-switcher\\": [\\"forge-view\\"]\\n    }\\n}\\n```\\n\\nAs you can see from the configuration options, the schematic itself is fairly generic, and may work with other Web Component libraries besides Forge.  It does assume certain conventions are followed, such as the use of TypeScript and specifically `HTMLElementEventMap` typings, but could probably be modified with additional options if the need ever arose.  The most essential metadata the schematic relies on, however, is a JSON file now published by the Forge library known as a Custom Elements Manifest.\\n\\n## The Custom Elements Manifest\\n\\nThe [Custom Elements Manifest](https://github.com/webcomponents/custom-elements-manifest) represents an effort to standardize on a common, machine-readable specification to describe custom elements. The schema is written in TypeScript and compiled to JSON Schema.\\n\\n[Framework Integration](https://github.com/webcomponents/custom-elements-manifest#framework-integration) is a documented use case for consuming such a manifest. The example cited is automating the creation of wrapper components for React, but here we\'re using it for Angular.  This schema could also be used to generate documentation of attributes, slots, events, and other features of Web Components in Storybook or the Forge website that currently require a lot of manual effort to keep up to date.  There\'s also an existing plugin for the analyzer for creating React wrappers based on the manifest, which might be of interest to React developers here at Tyler.\\n\\nThe manifest is automatically generated as part of the build using the [`@custom-elements-manifest/analyzer`](https://www.npmjs.com/package/@custom-elements-manifest/analyzer) and included in the published npm package.\\n\\nFor the Angular component generation to work, the only requirement is that the tag name for each custom element be specified in the JSDoc for the component class:\\n\\n```ts\\n/**\\n * The custom element class behind the `<forge-radio>` element.\\n * \\n * @tag forge-radio\\n */\\n@CustomElement({ name: RADIO_CONSTANTS.elementName })\\nexport class RadioComponent extends BaseComponent implements IRadioComponent {...}\\n```\\n\\n[Other JSDoc tags](https://custom-elements-manifest.open-wc.org/analyzer/getting-started/#supported-jsdoc) exist for including metadata about slots, attributes, CSS Shadow Parts, CSS Custom Properties, events, and more.  Specifying these properties could be useful for generating documentation or perhaps even surfacing them to developers in their code editor."},{"id":"/2023/02/10/split-view-component","metadata":{"permalink":"/blog/2023/02/10/split-view-component","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-02-10-split-view-component/index.md","source":"@site/blog/2023-02-10-split-view-component/index.md","title":"Split View Component","description":"The split view component arrived with Forge 2.9.0 a few months ago, finally giving us a way to develop resizable layouts without relying on third party libraries. This is a powerful tool that\'s been a long time in the making. It also has the potential to be a little confusing to use up front. This post will be an introduction to the split view, showing how you can use it and some of the thought that went into its development.","date":"2023-02-10T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"components","permalink":"/blog/tags/components"},{"inline":true,"label":"accessibility","permalink":"/blog/tags/accessibility"}],"readingTime":10.055,"hasTruncateMarker":true,"authors":[{"name":"Sam Richardson","title":"Senior Front End Software Engineer","url":"https://github.com/samrichardsontylertech","imageURL":"https://github.com/samrichardsontylertech.png","key":"sam.richardson","page":null}],"frontMatter":{"title":"Split View Component","decription":"Get to know the split view component.","authors":["sam.richardson"],"tags":["forge","components","accessibility"]},"unlisted":false,"prevItem":{"title":"Enhanced Angular Integration","permalink":"/blog/2023/03/22/angular-proxies"},"nextItem":{"title":"Forge Website Redesign","permalink":"/blog/2023/02/03/forge-website-redesign"}},"content":"The split view component arrived with Forge 2.9.0 a few months ago, finally giving us a way to develop resizable layouts without relying on third party libraries. This is a powerful tool that\'s been a long time in the making. It also has the potential to be a little confusing to use up front. This post will be an introduction to the split view, showing how you can use it and some of the thought that went into its development.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Basics\\n\\nYou can get a split view on the screen with as little code as this:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel></forge-split-view-panel>\\n    <forge-split-view-panel></forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\nThis creates the default view \u2014 a two panel layout arranged horizontally.\\n\\n![Basic split view without content example](./images/split_view_basic.png)\\n\\nThis already looks promising. Just like that you get two content areas and a handle dividing them. Click on the handle (notice the slick ripple animation) and drag it around to change the relative size of the panels.\\n\\nIt\'s pretty hard to differentiate the panels like this, though, so let\'s add in some content. While we\'re at it let\'s also make the right panel take up half the available space, up from the default 200 pixels.\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Basic split view with content example](./images/split_view_labelled.png)\\n\\n:::warning Responsive content\\nYou obviously can\'t rely on split view panel content to remain one size, so be extra careful to design anything you put in there to be responsive. Use flexible styling and always test it at different sizes.\\n:::\\n\\nIt\'s important to note that in this example only the right panel should be thought of as resizable. We\'ll get more into this later on, but for now know that by default the first panel automatically expands to fill the space left by its explicitly-sized siblings. If you need the left panel to resize instead you can use the `resizable` attribute to manually configure this.\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel resizable=\\"end\\" size=\\"50%\\">\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel resizable=\\"off\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\nWithout `resizable` set the split view assumes that the first panel isn\'t resizable and sets it for you. You may not have to mess with this very often, but when you do remember that at least one panel in any split view layout *must* have `resizable` set to off.\\n\\n:::tip Resizable\\nWhen you set `resizable` to `end` the handle gets added after the content. Set it to `start` to get the reverse, or `off` if you don\'t want a handle at all.\\n\\nIf your content can normally be resized but you want to conditionally prevent it, you can add a `disabled` attribute to the panel.\\n:::\\n\\n### Vertical split view\\n\\nAll you need to do for a vertical split view layout is set the `orientation` attribute on the component:\\n\\n```html\\n<forge-split-view orientation=\\"vertical\\">\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Vertical split view example](./images/split_view_vertical.png)\\n\\nThis is a nice layout to use when you\'re designing for a screen that\'s taller than it is wide, e.g. a phone. Get responsive and use a [media query](https://css-tricks.com/working-with-javascript-media-queries/) to track the browser\'s viewport size, switching between horizontal and vertical orientations on the fly to deliver the best experience.\\n\\n:::warning Pay attention to context\\nMake sure the container you put the split view in is a block element with height! The component expands to fill its container by default and may not work if it\'s unable to.\\n:::\\n\\n### Multiple panels\\n\\nWhat if you need more than two panels of content? The split view component can handle that. Add any number of panels to your view and they\'ll render just as you\'d expect.\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"33%\\">\\n        <div>Middle</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"33%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Split view with three panels example](./images/split_view_multiple.png)\\n\\nWhen you resize a panel in a setup like this it can only expand up to the point where the neighboring panel is as small as possible. So if you were to drag the right panel\'s handle in this example, the middle panel could shrink down to a width of zero pixels or expand to fill both panel\'s space but the left panel won\'t ever change size. \\n\\nThis also works in a vertical layout, of course.\\n\\n### Constraining sizes\\n\\nSometimes you don\'t want to give the user complete control over the size of your content. Maybe, as responsive as you were able to make your design, something just breaks when it gets too big or too small.\\n\\nFor cases like that we have the `min` and `max` attributes. Each takes a pixel amount or percentage and ensures that the panel it\'s set on will never resize past that boundary.\\n\\nThis code constrains the right panel to a width between 100 pixels and two thirds the width of the split view:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\" min=\\"100\\" max=\\"67%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\nAnd this makes sure *neither* panel can get smaller than 180 pixels:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel min=180>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\" min=\\"180\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n### Hiding panels\\n\\nIt\'s not always enough to simply minimize content. You may also want to give users the ability to completely hide a panel from view. Imagine you have something like a document viewer beside your other content. It\'s nice to be able to scale the viewer to your preferred size, but it doesn\'t make sense to have it up at all when nothing\'s open in it.\\n\\nThe `open` attribute is there to solve this problem. Set it to `true` to keep a panel visible, or `false` to hide it away with a quick animation (just like the Forge drawer component).\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel open=false>\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Split view with closed panel example](./images/split_view_closed.png)\\n\\nThe right panel here has its `open` attribute set to `false` and so is hidden from the view and assistive technology.\\n\\nPanels can also be configured to close automatically when they reach a certain size. Set `auto-close` to `true` to enable this at zero pixels, and `auto-close-threshold` to your desired pixel threshold if it differs.\\n\\n:::warning Opening panels\\nBecause the entire panel, along with its handle, goes away when closed, there\'s no built in way to open a closed panel. You must provide your own UI to control this.\\n:::\\n\\n## How it works\\n\\nAt its heart the split view component is a [flex](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox) container with some extra logic to manage communication between its children. Panels with `resizable` set to `off` grow and shrink to fill space simply because they have their CSS [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property set to `1`.\\n\\nOther panels have their widths explicitly set via JavaScript. When a user begins resizing, the panel get its size and the initial pointer location. As the pointer moves the initial and updated locations are continually compared to produce a delta value which is then added to the starting size to produce the new size.\\n\\nTypically computations involving rapid reads and write to the DOM are expensive because they trigger reflows affecting every element on the page. The split view attempts to improve performance by doing the necessary reads at the beginning of the process and delaying other calculations until the resize has ended. It also makes use of the [`contain`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) CSS property to restrict how much of the page is involved in reflows that do happen.\\n\\nWhen a resize has ended, the affected panel signals its siblings to recalculate their properties via their parent split view.\\n\\n## Accessibility\\n\\nThe single point of interaction for each split view panel is its handle. This is the element that, aside from being draggable via mouse, receives keyboard focus and provides the panel\'s semantic information.\\n\\nThe semantics piece is why it\'s important to understand which handle controls each panel and by extension which panels are resizable (calling back to the beginning of the post). Each panel **must** be labelled to properly expose it to assistive technology. We do that with the `accessible-label` attribute, which sets the interior `aria-label` property of the handle:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel accessible-label=\\"Right\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n:::info Labels\\nEach of the previous examples in this post should have had labels set. The only reason they were omitted up until this point was for readability.\\n:::\\n\\nThe label should be a short and simple description of the panel\'s content. Think of it as another heading on the page. In one of the previous examples we might have set it to \\"Document viewer\\". Note that there\'s no need to include the word \\"panel\\", \\"handle\\" or anything like that.\\n\\nAlso note that the left panel doesn\'t have a label. This is because it is not resizable, which means it doesn\'t have a handle and therefore doesn\'t provide any semantic information. Even if you did set a label, it would never make it to the DOM anyway.\\n\\nWith this in mind you might see why we\'d choose one panel to be resizable over another. It\'s often the secondary, \\"aside\\" or \\"detail\\" content that makes more sense as resizing. Whether that ends up on the left, right, top, or bottom is up to you.\\n\\nThere are other accessible attributes set on the handle as well, though most developers will never have much need the think about them here. These include:\\n- `role=separator`\\n- `aria-orientation`, either `vertical` or `horizontal`\\n- `aria-valuemin`, `aria-valuemax`, and `aria-valuenow`\\n- `aria-grabbed`, reflecting whether it\'s currently being dragged\\n- `aria-controls` pointing to the content element\\n\\nThese attributes, and more interesting things about this sort of component, are detailed in [MDN\'s docs on the separator role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role). \\n\\n### Keyboard interaction\\n\\nTo empower screen reader users and anyone who prefers to navigate with their keyboard, all the functionality of the split view component is available through keyboard shortcuts.\\n\\nWhen a panel\'s handle is focused the arrow keys will expand or collapse it (faster if combined with the shift key) and the home and end keys minimize and maximize it, respectively. This is all pretty straightforward so far.\\n\\nThere\'s one more shortcut available but you\'ll have to enable it manually \u2014 set the `allow-close` property and a press of the enter/return key will close the panel. As noted before, if a panel closes there\'s no built-in UI to reopen it, so don\'t forget to account for that in your design.\\n\\n## Customization\\n\\nMost of the split view component\'s appearance is defined by the content you place in it. Its only obvious UI element is the handle between panels. That said, each internal element has a [part selector](https://developer.mozilla.org/en-US/docs/Web/CSS/::part) to allow you to style it however you want.\\n\\nThe split view itself only exposes one part, `root`.\\n\\nThe panel has a few more:\\n- `root`: The container element.\\n- `handle`: The handle element.\\n- `icon`: The icon *inside* the handle element.\\n- `ripple`: The ripple that activates when the handle is interacted with.\\n- `content`: The container around the content you slot in.\\n\\nThe other day I was working on an app and wanted to switch up how my split view looked. I ended up writing this bit of SCSS:\\n\\n```scss\\nforge-split-view {\\n  &[orientation=vertical] {\\n    --app-split-view-handle-icon-width: 32px;\\n    --app-split-view-handle-icon-height: 4px;\\n  }\\n\\n  &[orientation=horizontal] {\\n    --app-split-view-handle-icon-width: 4px;\\n    --app-split-view-handle-icon-height: 32px;\\n  }\\n\\n  forge-split-view-panel {\\n    &::part(icon) {\\n      background-color: var(--mdc-theme-text-secondary-on-light);\\n      height: var(--app-split-view-handle-icon-height);\\n      width: var(--app-split-view-handle-icon-width);\\n      border-radius: 2px;\\n    }\\n  }\\n}\\n```\\n\\nThis snippet sets height and width variables based on the split view\'s orientation then uses those to turn the icon element into a little pill shape.\\n\\n![Split view with custom icon example](./images/split_view_custom_icon.png)\\n\\nYou don\'t necessarily have to dig into it like that to change up the style though. These [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) are also available to do some simple customization:\\n- `--forge-split-view-handle-width`: Controls the handle width.\\n- `--forge-theme-border-color`: Controls the handle color.\\n- `--mdc-theme-text-secondary-on-light`: Controls the icon color.\\n\\n## Conclusion\\n\\nA lot of hard work went into developing the split view component to be as robust, accessible, and developer friendly as possible. As more teams start to use it we\'re looking forward to seeing what new kinds of layouts and user interactions it enables. For more in depth info and to test it out for yourself, check out our [developer documentation in Storybook](https://forge.tylerdev.io/main/?path=/story/components-split-view--default)."},{"id":"/2023/02/03/forge-website-redesign","metadata":{"permalink":"/blog/2023/02/03/forge-website-redesign","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-02-03-forge-website-redesign/index.md","source":"@site/blog/2023-02-03-forge-website-redesign/index.md","title":"Forge Website Redesign","description":"Welcome to the new and improved Forge design system website!","date":"2023-02-03T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"design-system","permalink":"/blog/tags/design-system"},{"inline":true,"label":"welcome","permalink":"/blog/tags/welcome"}],"readingTime":6.725,"hasTruncateMarker":true,"authors":[{"name":"Nick Andrews","title":"Senior UX Designer","url":"https://github.com/nickonometry","imageURL":"https://github.com/nickonometry.png","key":"nick.andrews","page":null},{"name":"Jay McCormick","title":"Senior Product Owner","url":"https://github.com/jayexprs","imageURL":"https://github.com/jayexprs.png","key":"jay.mccormick","page":null},{"name":"Eric Wayne","title":"Senior UX Designer","imageURL":"https://cdn.forge.tylertech.com/v1/icons/svg/standard/account_circle.svg","key":"eric.wayne","page":null},{"name":"Kathy Wolf","title":"UX Director","imageURL":"https://cdn.forge.tylertech.com/v1/icons/svg/standard/account_circle.svg","key":"kathy.wolf","page":null},{"name":"Kieran Nichols","title":"Software Architect","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols","page":null}],"frontMatter":{"title":"Forge Website Redesign","decription":"Welcome to the new and improved Forge design system website.","authors":["nick.andrews","jay.mccormick","eric.wayne","kathy.wolf","kieran.nichols"],"tags":["forge","design-system","welcome"]},"unlisted":false,"prevItem":{"title":"Split View Component","permalink":"/blog/2023/02/10/split-view-component"},"nextItem":{"title":"Forge 2.0 Upgrade","permalink":"/blog/2022/05/02/upgrade-guide-forge-2"}},"content":"Welcome to the new and improved Forge design system website!\\n\\nThis is the first step toward a larger goal of open sourcing the design system so that it is publicly accessible. We are hoping to share the great work\\nthat the Forge team has done with the public community, as well as provide a design system to go along with our open source Forge Web Component library.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this first release of the new website, we have largely kept the content the same, although we have reorganized it, improved naming conventions, and audited the content to correct our guidance. However, we expect to continue refining this design documentation, including deprecating content, moving content to locations outside of the design docs, and adding entirely new content. \\n\\nBelow we highlight what to expect with this update.\\n\\n## Landing page and navigation\\n\\nOne of the first changes you\'ll notice is to the landing page and navigation structure of the website, from the top-level through to the organization of individual pages. These changes implement a new information architecture that make it easier to locate content and to show how different elements in the design system relate to each other. \\n\\nFor example, in the `/Components` section of the website, we have added component categories to group components by purpose or use. Previously, those components were presented in a single alphabetical list. In the new information architecture, it is easier to find a component or set of components based on the problem they are intended to solve.\\n\\n### Get started\\nOne of the key sections of the new website is `/Get started`, where we have consolidated the content previously grouped under \\"Core components\\" or \\"Core patterns\\". This new section provides product teams a single starting point for answering the question, \\"At a minimum, what does a Forge application include?\\" Moreover, this section provides a logical grouping for content, like typography, colors, branding, and icons that don\'t neatly fit into either a \\"components\\" or \\"patterns\\" category.\\n\\n## Development docs\\n\\nAs Forge grows and matures, we needed to change how we surface development documentation to our users. Previously we had development details embedded directly\\nin the Forge design system website. This was great for our users, but it falls down quickly when there are multiple versions of our component library and made\\nit very difficult from a maintenance perspective.\\n\\nWe were faced with this problem and needed to quickly determine how to best surface these important details. Our options were to either build a content versioning\\nsystem into our website, or link out to external documentation and keep the design system focused on, well, design. We opted to go for the latter which introduces\\na distributed content model.\\n\\n### Distributed content model\\n\\nAs you\'ve likely already noticed and used, we have moved developer documentation details and demos to Storybook. This tool was designed for component libraries to\\nshow live demos of components alongside API and usage documentation. This now allows for us to provide versioned component library documentation, and link to it \\nfrom the design system.\\n\\nWe will continue to follow this format as Forge continues to grow!\\n\\n## Tooling\\n\\nYou may have noticed that our website received a face lift, along with some new features! We learned over the past few years that maintaining\\ndesign system guidance and content can be daunting task, along with the task of maintaining various website features such as search, navigation,\\nlayout, ...etc. In an effort to reduce our maintenance overhead and focus more on the content you need, we have made the decision to switch from \\na custom solution built with Gatsby to a configuration-based solution called [Docusaurus](https://docusaurus.io/docs)!\\n\\n### Docusaurus\\n\\nWe believe that moving to Docusaurus will not only allow us to focus on what matters most, design system guidance and content, but also\\nenable us to make use of its great built-in features that will only provide benefits to our users that we were unable to provide without significant\\neffort in our old Gatsby-based solution.\\n\\nA quote from the Docusaurus docs:\\n\\n> Building a custom tech stack is expensive. Instead, focus on your content and just write Markdown files.\\nDocusaurus has many great benefits, but below are just a few that we\'d like to highlight:\\n\\n- Removes the need to build the website from scratch (aka site layout, navigation, search... etc.). It\u2019s generated for us instead based on file structure and configuration.\\n- Supports markdown and MDX, as well as custom React components\\n- N-level navigation (supporting our new IA)\\n- Fully theme-able\\n- Content versioning\\n- Localization\\n- Built-in blogging functionality\\n- Built-in full-text search\\n- Supports headless CMS integration\\n- We **build less** and **focus more on content**\\n\\n### Design\\n\\nYou\'ll notice if you inspect the site that we\'re no longer \\"eating our down dog food\\" if you will. This means that the site is no longer built with Forge components. We have learned\\nthat Forge was not necessarily designed for building documentation websites, and although we certainly can, we\'d prefer that folks use our guidance content to drive their design\\ndecisions instead of using the documentation website itself. This allows us to tailor our website toward being great for providing documentation instead of being an example\\nof enterprise application design.\\n\\n### Search\\n\\n**We have heard you!** The search functionality in the old Gatsby-based Forge website was mediocre at best... Docusaurus provides various built-in search options for us, and we are happy to announce that we now offer a much improved full-text search function. Give it a try in the header above!\\n\\n### Blog\\n\\nWe have struggled in the past with keeping our users up to date with the happenings of Forge, and we want to improve that. A blog is natural way to allow for us to make announcements,\\nand provide detailed information to you in a consistent location that you already use. We intend to use this blog section you\'re viewing right now to keep you up to date with everything from design to development as Forge grows and improves.\\n\\n:::info Please share!\\nIf you have any topics or announcements related to Forge, we would love for you to share it with everyone else! Please feel free to create posts here or reach out to us if you have questions.\\n:::\\n\\n## Next steps\\n\\nAs mentioned above, this is a conversion/translation from our old website to our new and improved one. This is just the first step as we look forward to open sourcing the design system\\n\\nBefore we are able to do that, we have a few things need to take care of:\\n\\n### Audit our content\\n\\nThere are portions of the Forge design system that we need to keep private, or things that just may not be valuable for people outside of Tyler to see. We need to audit\\nthe website and determine what content needs to be kept private to Tyler employees.\\n\\n### Forge \\"hub\\"\\n\\nIn an effort to keep the Forge ecosystem easy to navigate, we are looking into how to best surface everything Forge-related to Tyler employees, while still supporting our\\nnew distributed content model. This is where the concept of a Forge \\"hub\\" comes in. This hub of sorts will live in what is now forge.tylertech.com, but it may look a bit\\ndifferent. We\'re hoping to surface everything that you need to build Tyler applications here, and curating separate websites into a singular location that makes it easy \\nto find what you\'re looking for.\\n\\nMore to come on this soon!\\n\\n### Open source\\n\\nReleasing our design system to the open source community also means we need to host the website publicly. We intend to secure a new domain for this public version of Forge,\\nwhile allowing contribution from both Tyler employees and the public open source community.\\n\\nAn important thing to highlight about open sourcing, is that our contribution process becomes much easier. We have some answers to more easily allow non-technical folks to\\nprovide contributions to the design system content. More to come on this one as well in the future!"},{"id":"/2022/05/02/upgrade-guide-forge-2","metadata":{"permalink":"/blog/2022/05/02/upgrade-guide-forge-2","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2022-05-02-upgrade-guide-forge-2/index.md","source":"@site/blog/2022-05-02-upgrade-guide-forge-2/index.md","title":"Forge 2.0 Upgrade","description":"How to upgrade applications & libraries from TCW (1.x) to Forge 2.x.","date":"2022-05-02T00:00:00.000Z","tags":[{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"components","permalink":"/blog/tags/components"},{"inline":true,"label":"upgrade","permalink":"/blog/tags/upgrade"}],"readingTime":37.215,"hasTruncateMarker":true,"authors":[{"name":"Kieran Nichols","title":"Software Architect","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols","page":null}],"frontMatter":{"authors":["kieran.nichols"],"tags":["forge","components","upgrade"]},"unlisted":false,"prevItem":{"title":"Forge Website Redesign","permalink":"/blog/2023/02/03/forge-website-redesign"},"nextItem":{"title":"Forge and package dependencies","permalink":"/blog/2020/05/06/package-dependencies"}},"content":"How to upgrade applications & libraries from TCW (1.x) to Forge 2.x.\\n\\n## Overview\\n\\nWelcome to the TCW/Forge upgrade guide! If you\'re looking for information about how to upgrade from TCW v1.x to Forge 2.0, you\'ve\\ncome to the right place.\\n\\nWith the next generation version of Tyler Components Web (TCW) now being generally available, you probably have a lot of\\nquestions about how to upgrade, what is happening with the previous version, what has changed... etc. This guide is intended\\nto walk you through the process of upgrading your applications and libraries, and answer all of the questions above and much more.\\n\\n:::info\\nYes, there are **breaking changes** that come with this upgrade, but we can assure you the process is not as daunting\\nas it may seem.\\n\\nPlease let us know if you run into any problems that are not documented in this guide!\\n:::\\n\\nLet\'s get started!\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## Rebranding\\n\\nThe most important part of this upgrade is to understand that the TCW project is being **rebranded** as \\"Forge\\" components! (aka Forge 2.0)\\n\\nTCW as it stands today is being **deprecated** and **replaced** with a new Forge-branded version of the library. You can think of Forge 2.0\\nas the next generation evolution of the TCW library.\\n\\n:::info\\nEssentially `@tylertech/tyler-components-web` is being replaced with an equivalent package called `@tylertech/forge`\\n:::\\n\\nThis likely doesn\'t come as a surprise to most, given that\'s how many have referred to the project over the years anyway. But,\\nthe main reason for this rebrand is to better align ourselves with our open source goals, and ensure that the library is more\\ntightly coupled with our Forge design system. This coupling will help ensure that we can these projects are more closely related,\\nand make it feel more cohesive going forward.\\n\\n:::note\\nThe functionality and design of the components has been largely left **unchanged** during this migration.\\n:::\\n\\nAs you may have guessed, this means that our naming convention across the library is changing from anything `tcw` or `tyl`-related,\\nto be just `forge`. More information about that below.\\n\\n---\\n\\n## Why the need for a new version?\\n\\nThis is an excellent question, and one we went back and forth on for quite some time before deciding a proper path forward.\\n\\nLet\'s start with a little history about TCW. The project started in May of 2017. It has taken on various forms over that\\nperiod of time, and **a lot** has been changed and been learned. Not only did we need to support legacy browsers like IE 11\\nat the time, we also had to compile our code to ES5 and make use of legacy polyfills for Web Component browser support.\\n\\nFast-forward 5 years and we have now found ourselves maintaining a library that was built for the past, has inconsistencies\\nin naming conventions and APIs, poorly structured components, and is unable to upgrade important internal dependencies for a\\nnumber of reasons. We also do not need to support ES5 or require the use of slow polyfills as Web Components are widely\\nsupported in all modern browsers.\\n\\nAt a high level, the items below are the most important reasons for this new version:\\n\\n<details>\\n  <summary><b>View details</b></summary>\\n\\n\\n  - Drop support for IE 11. We now support all latest versions of modern browsers.\\n    <details>\\n      <summary>Minimum browser support</summary>\\n\\n      - Google Chrome: `Version 54+`\\n      - Firefox: `Version 63+`\\n      - Safari: `Version 10.1+`\\n      - Opera: `Version 64+`\\n      - Edge (Chromium): `Version 79+`\\n      - Internet Explorer: `Not supported without downleveling JavaScript to ES5 and using polyfills`\\n\\n    </details>\\n  - Drop support for ES5. Our minimum build target is now ES8 (ES2017).\\n    - This helps improve performance and bundle sizes in downstream applications, and allows us to use newer, more modern browser APIs.\\n  - Remove the need for slow polyfills. No more `@webcomponents/webcomponentsjs` dependencies in your apps!\\n  - Upgrade our internal version of MDC from version 4 to version 13 (yes, we were that far behind) to support Sass modules.\\n    - The upgrade to support Sass modules requires a breaking change (this was actually reason #1 for the new version initially).\\n    - This also allows for us to take advantage of new features and designs that have been released since version 4.\\n  - Introduce consistent naming conventions and APIs across the library.\\n  - Refactor various components (that previously encapsulated multiple variants) into separate components to allow for easier maintenance and more obvious usage.\\n  - Prepare ourselves for the release of the Forge component library to the public open source community!\\n  - Improve our theming system to make theme customizations easier and more straightforward.\\n\\n\\n</details>\\n\\n<br/>\\n\\nAs you can see, there are many benefits to this upgrade, but what is going to happen to the existing version of TCW?\\n\\n---\\n\\n## What is happening to TCW 1.x?\\n\\nThe TCW 1.x version is going to continue to receive patch updates going forward as needed, but is essentially going into maintenance\\nmode with the goal to move **everyone** to the new Forge component library over time, and archive the 1.x version/repository. The new\\nversion provides many bug fixes, features, improved performance and is where all new features will be added going forward. It is a\\nmore modern implementation, with a lot of changes based on what we learned over the years from teams using TCW 1.x.\\n\\nWe plan to keep maintaining the 1.x version for a period of time to give teams a chance to upgrade to the new version, but it is now\\nofficially considered **deprecated** at this time. You should perform this upgrade at your earliest convenience.\\n\\nIf your team is facing issues with defining a timeline for upgrading, or if you have questions about the upgrade process, please reach\\nout to the Forge team for assistance!\\n\\n---\\n\\n## What is changing?\\n\\nThere are always breaking changes that come with major version upgrades. It\'s an unfortunate, but beneficial side-effect. It\'s\\nthe only way to innovate and keep up with the ever-changing web development ecosystem. That time has come.\\n\\nYou\'re probably thinking: \\"So what you\'re saying is I need to rewrite a lot of my code that I just wrote to start using Forge/TCW?\\"\\n\\nWe want to be very clear that this is **not** the case. This guide is intended to help you through this process, and after upgrading\\nseveral complex applications, we can assure you that it\'s actually quite a simple process, but it does require some attention. You\\nshould not need to adjust any of your application logic aside from just renaming a few APIs that are related to Forge.\\n\\nAt a high level, here is what is changing: \ud83d\ude48\\n\\n<details>\\n  <summary><b>View changes</b></summary>\\n\\n\\n  - Replace `node-sass` dependency with the API-compatible `sass` (Dart implementation) package.\\n    - This dependency change is what enables us to use Sass modules, and you should too! See [below](#sass-modules) for more information on this subject.\\n  - Replace TCW-branded packages with Forge-branded packages:\\n    - Replace `@tylertech/tyler-components-web` dependency with `@tylertech/forge`\\n    - Replace `@tylertech/tyler-components-web-angular` dependency with `@tylertech/forge-angular`\\n    - Replace `@tylertech/tyler-components-web-react` dependency with `@tylertech/forge-react`\\n    - Replace `@tyler-components-web/core` dependency with `@tylertech/forge-core`\\n    - Replace `@tyler-components-web/cli` dependency with `@tylertech/forge-cli`\\n  - Rename TCW-related code to Forge-branded naming conventions:\\n    - Rename all `<tcw-*>` HTML element names to `<forge-*>`\\n    - Rename all `tcw-*` event element names to `forge-*`\\n    - Rename all `tyl-*` CSS class names to `forge-*`\\n    - Rename all `--tyl-*` CSS custom properties to `--forge-*`\\n  - Generic core components and Tyler-specific components have been separated into two libraries.\\n    - Generic components live in `@tylertech/forge`\\n    - Tyler-specific components live in `@tylertech/forge-internal`. See [below](#step-6-public-vs-tyler-specific-components) for details.\\n    - Similar naming convention for adapter libraries, such as `@tylertech/forge-react-internal`... etc.\\n  - Review list of component and API breaking changes and apply corresponding fixes where necessary.\\n\\nThe vast majority of the changes can be handled with some good ol\' fashioned find & replace.\\n\\n</details>\\n\\n<br/>\\nLet\'s get into the details!\\n\\n:::note\\nExpand the various sections below to view the detailed list of changes. There are checkboxes next to each item to help you ensure you have evaluate\\neverything as you make progress. Some of the items themselves have more information that can be further expanded to view extra details about a specific change.\\n:::\\n\\n### Breaking changes \ud83d\udca5\\n\\nThe breaking changes listed below are separated out into high-level groupings by type. While the most common/important changes are listed in \\"Highlights\\",\\nplease remember to review the other sections to ensure you don\'t miss anything. Some of the changes listed will silently cause issues at runtime and it\'s\\nimportant that you validate whether you are using the changed features or not.\\n\\n:::tip\\nReference your application/library to see which TCW/Forge components you have defined and are using. This can help you pare down the breaking\\nchanges to only the components you know you\'re using.\\n\\nPlease let us know if you have any questions!\\n:::\\n\\n<details>\\n  <summary><b>Highlights</b></summary>\\n\\n:::note\\nMake sure to expand certain items below to view more details!\\n:::\\n\\n  <CheckboxListItem heading=\\"Busy indicator\\" description=\\"The usage expectation for this component has changed. The APIs have been adjusted, and the implementation no longer ensures a single instance of the component anymore and it will no longer handle multiple messages automatically. It is up to you to manage your instances and message updates, much like you do with the dialog component (as this is a derivative of the dialog pattern).\\">\\n    \\nThe following properties/methods have been removed:\\n\\n  - `delay`\\n  - `autoEllipsis`\\n  - `minimumVisibleLifetime`\\n  - `isDestroyed`\\n  - `addMessage()`\\n  - `removeMessage()`\\n\\nThe `hide()` method has been refactored to remove the `messageId` parameter. Busy indicators no longer support managing multiple messages, ellipsis, or auto-delay.\\nThis responsibility has been moved to developers to ensure flexibility, familiarity, and consistency with the usage of other Forge components such as the dialog.\\n\\n:::note\\nIf you need to ensure one instance of the busy-indicator is visible across multiple components but you only need to update the message or progress, you may want\\nto wrap that up into a reusable service for your application. This can allow you to essentially replicate the previous functionality by housing it in a central\\nlocation that your components can communicate with instead of interacting with the component directly.\\n:::\\n\\n  </CheckboxListItem>\\n  \\n  <CheckboxListItem heading=\\"Drawer\\" description=\\"Separated from a single component into 3 separate components for improved development experience and to ease maintainability on our end.\\">\\n\\nPreviously if you were using the drawer to toggle between the `dismissible` type and the `modal` type, you will now need to swap out the underlying components\\nthat are being used instead of adjusting the `type` property/attribute.\\n\\n**Old:**\\n\\n```html\\n<tcw-drawer></tcw-drawer> \x3c!-- \\"permanent\\" type was default --\x3e\\n<tcw-drawer type=\\"dismissible\\"></tcw-drawer>\\n<tcw-drawer type=\\"modal\\"></tcw-drawer>\\n<tcw-drawer type=\\"mini\\"></tcw-drawer>\\n<tcw-drawer type=\\"mini-hover\\"></tcw-drawer>\\n```\\n\\n**New:**\\n\\n```html\\n<forge-drawer></forge-drawer> \x3c!-- This is both \\"permanent\\" and \\"dismissible\\" now --\x3e\\n<forge-modal-drawer></forge-modal-drawer>\\n<forge-mini-drawer></forge-mini-drawer>\\n<forge-mini-drawer hover></forge-mini-drawer>\\n```\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"Card\\">\\n\\n\\n  - removed all internal slots (except for the default slot) and the internal CSS grid layout. If you need to retain previous layouts, use a nested `<forge-scaffold>` for that.\\n  - removed built-in `margin-bottom`.\\n  - removed the `has-padding` property/attribute. Use the `--forge-card-padding` CSS custom property to control this via CSS now.\\n\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Renamed the `<tcw-datepicker>` to `<forge-date-picker>` for naming convention consistency.\\" />\\n  <CheckboxListItem heading=\\"Dialog\\" description=\\"This component used to get auto-defined for you if you were using the select, menu, time-picker, date-picker, date-range-picker. This will no longer happen, and you will need to manually define the dialog going forward if you weren\'t already. If you see any issues with dialog, please first check that you have it defined in your app.\\" />\\n  <CheckboxListItem heading=\\"Icon\\" description=\\"Renamed the `TylerIconRegistry` to just `IconRegistry`.\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed all global `tyl-list-item*` CSS classes in favor of using slots in the component (added new `title`, `subtitle`, `tertiary-title` slots).\\">\\n\\n**Old:**\\n\\n```html\\n<tcw-list-item three-line=\\"true\\">\\n  <span class=\\"tyl-list-item__title\\">List Item</span>\\n  <span class=\\"tyl-list-item__subtitle\\">Secondary Text</span>\\n  <span class=\\"tyl-list-item__tertiary-title\\">Tertiary Text</span>\\n</tcw-list-item>\\n```\\n\\n**New:**\\n\\n```html\\n<forge-list-item three-line>\\n  <span slot=\\"title\\">List Item</span>\\n  <span slot=\\"subtitle\\">Secondary Text</span>\\n  <span slot=\\"tertiary-title\\">Tertiary Text</span>\\n</forge-list-item>\\n```\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"omnibar\\">\\n\\n\\n  - rename to `<forge-app-bar>` (including all sub-components). The app-launcher component has been moved to the `@tylertech/forge-internal` components package.\\n  - See the [omnibar upgrade section](#omnibar-aka-app-bar) below for more detailed information about upgrading this component.\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"popup\\" description=\\"The `PopupPlacement` enum has been converted to a custom TypeScript `type`. Please see build errors and/or typings for information on what `string` values are allowed.\\" />\\n  <CheckboxListItem heading=\\"Progress spinner\\" description=\\"Replaced with a new `<forge-circular-progress>` component with more flexibility, but offers equivalent functionality.\\" />\\n  <CheckboxListItem heading=\\"Switch\\" description=\\"Refactored to remove `<input>` and `<label>` element within slotted content. Use just `<forge-switch>` element by itself with optional text content as a slotted child now.\\">\\n\\n  The semantics of the component have changed to use `<button>` with `role=\\"switch\\"` so there is no need to treat is as an `<input>` anymore.\\n\\n  **Old:**\\n\\n  ```html\\n  <tcw-switch>\\n    <input type=\\"checkbox\\" id=\\"switch\\" />\\n    <label for=\\"switch\\">off/on</label>\\n  </tcw-switch>\\n  ```\\n\\n  **New:**\\n\\n  ```html\\n  <forge-switch>\\n    <span>off/on</span>\\n  </forge-switch>\\n  ```\\n\\n  If you\'re using this component with Angular, you will want to ensure that you update your bindings to go on the `<forge-switch>` element now that there is no `<input>`\\n  element anymore. There is a `ControlValueAccessor` directive in the Angular adapter library `@tylertech/forge-angular` that will automatically enable the use of\\n  `ngModel` and `formControl`/`formControlName` on the `<forge-switch>` element now.\\n\\n  :::info\\n  Additionally, we added a new `label-position` property/attribute that you can set to `\\"start\\"` if you want the label positioned in front of the switch.\\n  :::\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"Table\\" description=\\"When using the `allow-row-click` functionality along with custom cell template content, the `click` events that dispatch from within the custom cell templates will **no longer** be automatically ignored. You will need to either stop propagation manually, or use the built-in `stopCellTemplateClickPropagation` property on the column configuration.\\" />\\n  <CheckboxListItem heading=\\"Text field | Select | Chip field\\" description=\\"Updated design to use the new inset style. The notched outline style has been removed.\\">\\n\\n\\n  **Old (notched-outline):**\\n\\n  ![Text field notched example](./images/text-field-notched.png)\\n\\n  **New (inset):**\\n\\n  ![Text field inset example](./images/text-field-inset.png)\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"Text field | Select | Chip field\\" description=\\"The built-in top & bottom `margin` has been removed from the internal component styles. You will need to handle spacing with this component on your end now (this is how it should have been from the beginning)\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"We renamed and organized the Sass files. Please check for any references to `@tylertech/tyler-components-web/styles/theme/*` and evaluate the proper files are referenced.\\" />\\n  <CheckboxListItem heading=\\"Typography\\" description=\\"Renamed and organized the Sass files. Please check for any references to `@tylertech/tyler-components-web/styles/typography/*` and evaluate the proper files are referenced.\\" />\\n  <CheckboxListItem heading=\\"Global StyleSheets\\" description=\\"Renamed `tcw-material-design.css` to `forge.css` and `tcw-core.css` to `forge-core.css`\\" />\\n  <CheckboxListItem heading=\\"Component Delegates\\" description=\\"APIs have changed slightly. This is mostly commonly been used with the table `filterDelegate` property.\\">\\n\\n  **Old:**\\n\\n  ```typescript\\n  new TextFieldComponentDelegate({ placeholder: \'Filter workspace\', density: \'roomy\' })\\n  ```\\n\\n  **New:**\\n\\n  ```typescript\\n  new TextFieldComponentDelegate({\\n    options: { placeholder: \'Filter workspace\' },\\n    props: { density: \'roomy\' }\\n  })\\n  ```\\n\\n  :::info\\n  The configuration object has been updated to an object that has two properties `options` and `props`:\\n  - `options` contains configuration for the delegate itself which may vary.\\n  - `props` are properties that will be passed to the underlying Forge component\\n  :::\\n\\n  </CheckboxListItem>\\n\\n</details>\\n\\n<details>\\n  <summary><b>Components</b></summary>\\n\\n  <CheckboxListItem heading=\\"Autocomplete\\" description=\\"Removed the `selectOnBlur` property. The component will now automatically select the highlighted option when the tab key is pressed while the dropdown is open, and this is no longer configurable. The first option in the dropdown will now automatically get highlighted when pressing down arrow to open the dropdown and when filtering by typing text in the `<input>`. Clicking outside of the dropdown to close it/blur the field will not select the highlighted option.\\" />\\n  <CheckboxListItem heading=\\"Autocomplete\\" description=\\"The deprecated `onBeforeValueChange` property has been removed. Use the equivalent `beforeValueChange` property instead.\\" />\\n  <CheckboxListItem heading=\\"Avatar\\" description=\\"The `autoColor` property has been changed to `false` by default, and a better default is background color (tertiary) is used for both surface and omnibar contexts.\\" />\\n  <CheckboxListItem heading=\\"Busy indicator\\" description=\\"Remove the `delay`, `autoEllipsis`, `minimumVisibleLifetime`, `isDestroyed` properties, as well as the `addMessage()` and `removeMessage()` methods. Also, refactored the `hide()` method to remove the `messageId` parameter. Busy indicators no longer support managing multiple messages, ellipsis, or auto-delay. This responsibility has been moved to developers to ensure flexibility, familiarity, and consistency with the usage of other Forge components such as the dialog.\\" />\\n  <CheckboxListItem heading=\\"Button toggle group\\" description=\\"When listening for the `forge-button-toggle-select` (emitted from the `<forge-button-toggle>` toggle element) event on the `<forge-button-toggle-group>` (group) element, this event has been renamed to `forge-button-toggle-group-change` to avoid confusion. If you desire to continue to use the `forge-button-toggle-select` event on the group, the `detail` property will contain an object of type `IButtonToggleSelectEventData` from the toggle that emitted it (not the current value of the group as a whole any longer). Use the type `CustomEvent<IButtonToggleGroupChangeEventData>` for the `forge-button-toggle-group-change` event now.\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"This component has been rewritten from the ground up. Many APIs have changed. See below for detailed information, but refer to the component docs for new usage information.\\">\\n\\n\\n  - Renamed events to use element name in prefix (`tcw-calendar-*` instead of `tcw-*`)\\n  - Renamed the `ICalendarDateSelectEvent` interface to `ICalendarDateSelectEventData`\\n  - The `tcw-date-range-select` event has been removed and its functionality included in the `tcw-calendar-date-select` event, which now has `range` and `rangeSelectionState` properties\\n  - Renamed the `tcw-active-change` event to `tcw-calendar-focus-change`\\n  - The `mode` property is now used to set the date selection behavior\\n  - The `multiselect` property is replaced by setting the `mode` property to `\'multiple\'`\\n  - The `range` property is replaced by setting the `mode` property to `\'range\'`\\n  - The \\"display\\" `mode` property setting is replaced by a new `readonly` property\\n  - Renamed the `viewIndex` property to `view`\\n  - Renamed the `blockedDates` property to `disabledDates`\\n  - Renamed the `minDate` and `maxDate` properties to `min` and `max`\\n  - The `minYear` and `maxYear` properties are replaced by a single `yearRange` property which only affects the year picker\\n  - The `viewIndex` property has been removed\\n  - The `autoSwitch` property has been removed, the `goToDate()` method can be used to move any date into view\\n  - Renamed `renderDateCallback` to `dateBuilder`, which now must return an `HTMLElement`\\n  - Renamed `disabledDayCallback` to `disabledDateBuilder`\\n  - Renamed `eventsCallback` to `eventBuilder`\\n  - Renamed the `removeDate()` method to `deselectDate()`\\n  - The `handleKey()` method now accepts a `KeyboardEvent` as an argument\\n  - Selecting a month or year from the picker no longer updates the selected date to match by default, the new `selectionFollowsMonth` property enables this\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"Card\\" description=\\"Refactor to remove internal grid layout, `header`, and `footer` slots. Will just act as a single slot going forward (use a nested `<forge-scaffold>` if structure is desired).\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"Removed built-in `margin-bottom` style on the host element\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"`outlined` attribute value is based on existence rather than coercing boolean value from string\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"The `masked` property is now `true` by default\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Removed the `startView` property\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Renamed the `blockedDates` property to `disabledDates`\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Refactored to use a base class abstraction (internal-only, but noted in case of importing the foundation/adapter in your own library)\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"The deprecated `useCharMask` property attribute has been removed.\\" />\\n  <CheckboxListItem heading=\\"DatepickerComponentDelegate\\" description=\\"Renamed to `DatePickerComponentDelegate` (upper-case \'P\' in \'picker\'), as well as adjusted the `onChange()` listener to return the value as a `Date` object instead of the `<input>` value string.\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"Removed the `startView` property\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"Refactored to use a base class abstraction (internal-only, but noted in case of importing the foundation/adapter in your own library)\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"The `masked` property is now `true` by default\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"The deprecated `useCharMask` property attribute has been removed.\\" />\\n  <CheckboxListItem heading=\\"DateRangePickerComponentDelegate\\" description=\\"Updated component delegate to use range picker instead of two separate date pickers. The public API has changed on this delegate.\\" />\\n  <CheckboxListItem heading=\\"DateRangePickerComponentDelegate\\" description=\\"Adjusted the `onChange()` listener to return the value as a `Date` object instead of the `<input>` value string.\\" />\\n  <CheckboxListItem heading=\\"Drawer\\" description=\\"Created separate components per-type (drawer, modal, mini) instead of a single component that handles all types.\\">\\n\\n\\n  - `<forge-drawer>`: this is essentially a combination of the old \\"permanent\\" and \\"dismissible\\" types\\n  - `<forge-mini-drawer>`: this is a combo of the old \\"mini\\" and \\"mini-hover\\" types\\n  - `<forge-modal-drawer>`: this is just the \\"modal\\" type on its own\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"Drawer\\" description=\\"The `tcw-drawer-close` event has been renamed to `forge-modal-drawer-close` since it only pertains to the `<forge-modal-drawer>` variant.\\" />\\n  <CheckboxListItem heading=\\"Expansion panel\\" description=\\"Removed the `tcw-expansion-panel-open` and `tcw-expansion-panel-close` events and replaced with `forge-expansion-panel-toggle` which returns a boolean of whether the expansion panel is open or closed.\\" />\\n  <CheckboxListItem heading=\\"File picker\\" description=\\"Remove the `value` property as it was unused. Use the change event to retrieve and store the selected files.\\" />\\n  <CheckboxListItem heading=\\"Icon button\\" description=\\"`dense` attribute value is based on existence rather than coercing boolean value from string\\" />\\n  <CheckboxListItem heading=\\"Icon button\\" description=\\"Renamed the `change` event to `forge-icon-button-change`\\" />\\n  <CheckboxListItem heading=\\"List dropdown\\" description=\\"Removed built-in dialog functionality where the dropdown would render in a dialog on mobile devices automatically. The expectation going forward is that native platform components/pickers will be used on mobile where necessary. This change also means all APIs related to this functionality, such as the common `dialogWidthThreshold` property on various components that utilize the list-dropdown internally will have removed this property.\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed all global `tyl-list-item*` CSS classes in favor of using slots in the component (added new `title`, `subtitle`, `tertiary-title` slots).\\">\\n\\n  **Old:**\\n\\n  ```html\\n  <tcw-list-item three-line=\\"true\\">\\n    <span class=\\"tyl-list-item__title\\">List Item</span>\\n    <span class=\\"tyl-list-item__subtitle\\">Secondary Text</span>\\n    <span class=\\"tyl-list-item__tertiary-title\\">Tertiary Text</span>\\n  </tcw-list-item>\\n  ```\\n\\n  **New:**\\n\\n  ```html\\n  <forge-list-item three-line>\\n    <span slot=\\"title\\">List Item</span>\\n    <span slot=\\"subtitle\\">Secondary Text</span>\\n    <span slot=\\"tertiary-title\\">Tertiary Text</span>\\n  </forge-list-item>\\n  ```\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed the `no-wrap` attribute in favor of using the `wrap` attribute only.\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Renamed the `IListItemSelectedEventData` interface to `IListItemSelectEventData`\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed `!important` on `leading`, `trailing`, and `avatar` slotted styles to allow for overriding. This comes with the caveat that it won\'t properly style any elements that are placed in these slots that have a `font-size` style applied that doesn\'t match the guidance. If you use font-based icons with the `tyler-icons` class where there is a `font-size` style applied, you may need to set a proper `font-size` manually OR switch to using the `<forge-icon>` component which inherits the `font-size` properly.\\" />\\n  <CheckboxListItem heading=\\"Omnibar\\" description=\\"Renamed the `tcw-omnibar-search-search` event to `forge-app-bar-search-input`\\" />\\n  <CheckboxListItem heading=\\"Omnibar search\\" description=\\"Removed the deprecated built-in `light-green`, `teal`, `blue`, `orange`, `red`, `blue-grey` themes. Only default and `white`themes are supported by default now.\\" />\\n  <CheckboxListItem heading=\\"Paginator\\" description=\\"Renamed the `change` event to `forge-paginator-change`\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"The deprecated `IPosition` interface has been removed in favor of using the `IPopupPosition` interface.\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"For all components that utilize the `<forge-popup>`: renamed `popupPositionAdjustment` and `positionAdjustment` properties to `popupOffset` and `offset` respectively.\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"Converted `PopupPlacement` enum to a standard custom type, as well as changed the `*-left` and `*-right` values to use logical alignment `*-start` and `*-end` (ex. `\'bottom-start\'` instead of `\'bottom-left\'` and `\'bottom-end\'` instead of `\'bottom-right\'`).\\" />\\n  <CheckboxListItem heading=\\"Progress spinner\\" description=\\"Removed and replaced with new `circular-progress` component. Note: the `progress` property on `circular-progress` changed to accept values from 0 to 1 instead of 0 to 100.\\" />\\n  <CheckboxListItem heading=\\"Scaffold\\" description=\\"The internal container now uses a `position: relative` style by default to better support content within the slots, but can be overridden via the `--forge-scaffold-body-position` CSS custom property if desired.\\" />\\n  <CheckboxListItem heading=\\"Scaffold\\" description=\\"`overflow` on the internal scaffold container element has been set to `hidden` by default, but can be overridden via the `\u2014-forge-scaffold-overflow` CSS custom property\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Removed the `selectOnBlur` property. The component will now automatically select the highlighted option when the tab key is pressed while the dropdown is open, and this is no longer configurable. The first option in the dropdown will now automatically get highlighted when pressing down arrow to open the dropdown. Clicking outside of the dropdown to close it/blur the field will not select the highlighted option.\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Removed the \'notched outline\' variant in favor for the \'inset\' design\\" />\\n  <CheckboxListItem heading=\\"Slider\\" description=\\"UI design has changed, as well as public API adjustments to account for new features. See Storybook docs for usage information.\\" />\\n  <CheckboxListItem heading=\\"Switch\\" description=\\"Refactored to remove `<input>` and `<label>` element within slotted content. Use just `<tcw-switch>` element by itself with optional text content as a slotted child now.\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Removed the \'notched outline\' variant in favor for the \'inset\' design\\" />\\n  <CheckboxListItem heading=\\"Tab bar\\" description=\\"Removed `focusOnActivate` property and adjusted default functionality to **not** automatically set focus to child toggles when activated via code.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Renamed the `ITableSortedEventData` interface to `ITableSortEventData`\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Renamed the `ITableSortedMultipleEventData` interface to `ITableSortMultipleEventData`\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"When using the `allow-row-click` functionality along with custom cell template content, the `click` events that dispatch from within the custom cell templates will **no longer** be automatically ignored. You will need to either stop propagation manually, or use the built-in `stopCellTemplateClickPropagation` property on the column configuration.\\" />\\n  <CheckboxListItem heading=\\"Time picker\\" description=\\"The deprecated `useCharMask` property attribute has been removed.\\" />\\n  <CheckboxListItem heading=\\"Toast\\" description=\\"Converted `placement` property to `ToastPlacement` type, as well as changed the `*-left` and `*-right` values to use logical alignment `*-start` and `*-end` (ex. `\'bottom-start\'` instead of `\'bottom-left\'`).\\" />\\n  <CheckboxListItem heading=\\"All component delegates\\" description=\\"All existing component delegate classes have been refactored to use new APIs. The biggest change here is that the configuration object provided to the constructor now contains a uniform generic API for separating properties related to component API vs supplemental component options.\\">\\n\\n\\n  - The `getValue()` and `setValue()` methods have been converted to a `value` property getter/setter.\\n  - The `setDisabled()` and `setValidity()` methods have been converted to `disabled` and `invalid` getter/setter properties respectively.\\n  - The `validate()` method has been removed.\\n\\n\\n  </CheckboxListItem>\\n\\n</details>\\n\\n<details>\\n  <summary><b>CSS Custom Properties</b></summary>\\n\\n:::note\\nAll component-specific theme CSS custom properties (any properties related to color) have been renamed using the following convention: `--forge-<component name>-theme-<style name>`.\\n:::\\n\\n  <CheckboxListItem heading=\\"Tyler-specific theme CSS custom properties\\" description=\\"Separated from MDC and renamed. MDC variables will use `--mdc-*` prefixes and Tyler (formerly `--tyl-*`) variables will use `--forge-*` prefixes.\\" />\\n  <CheckboxListItem heading=\\"Avatar\\" description=\\"Renamed `--tyl-avatar-background-color` CSS custom property to `--forge-avatar-theme-background` and `--tyl-avatar-foreground-color` to `--forge-avatar-theme-on-background`\\" />\\n  <CheckboxListItem heading=\\"Backdrop\\" description=\\"Removed usage of `--mdc-theme-text-secondary-on-light` variable for `background-color` and now using `--forge-backdrop-theme-background` instead.\\" />\\n  <CheckboxListItem heading=\\"Badge\\" description=\\"Replaced `$themes` Sass variable (including individual theme map variables) with single `$theme-values` map variable.\\" />\\n  <CheckboxListItem heading=\\"Banner\\" description=\\"Replaced `$themes` Sass variable (including individual theme map variables) with single `$theme-values` map variable.\\" />\\n  <CheckboxListItem heading=\\"Banner\\" description=\\"Renamed `--tyl-banner-background-color` to `--forge-banner-theme-background`, `--tyl-banner-color` to `--forge-banner-theme-on-background`, and `--tyl-banner-icon-color` to `--forge-banner-theme-icon`\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"Renamed all `--tyl-calendar-event-*` CSS custom properties to use the following naming convention: `--forge-calendar-theme-event-*`.\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"Using `text-disabled-on-light` variable instead of `text-hint-on-background` for disabled theme\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"Removed the `--tyl-calendar-width` and `--tyl-calendar-cell-size` custom properties - the calendar can now be assigned a width in CSS and responsively resizes\\" />\\n  <CheckboxListItem heading=\\"Footer\\" description=\\"Renamed `--tyl-footer-background-color` to `--forge-footer-theme-background` and `--tyl-footer-color` to `--forge-footer-theme-on-background`.\\" />\\n  <CheckboxListItem heading=\\"Icon\\" description=\\"Renamed `--tyl-icon-color` to `--forge-icon-theme-color`\\" />\\n  <CheckboxListItem heading=\\"Inline message\\" description=\\"Replaced `$themes` Sass variable (including individual theme map variables) with single `$theme-values` map variable.\\" />\\n  <CheckboxListItem heading=\\"Inline message\\" description=\\"Renamed `--tyl-inline-message-background-color` to `--forge-inline-message-theme-background`, `--tyl-inline-message-color` to `--forge-inline-message-theme-on-background`, and `--tyl-inline-message-icon-color` to `--forge-inline-message-theme-icon`\\" />\\n  <CheckboxListItem heading=\\"Linear progress\\" description=\\"Renamed `--tyl-linear-progress-buffer-color` to `--forge-linear-progress-theme-buffer` and `--tyl-linear-progress-buffer-dots-filter` to `--forge-linear-progress-theme-buffer-dots`.\\" />\\n  <CheckboxListItem heading=\\"Omnibar\\" description=\\"Removed `on-primary` theme color in favor of `--forge-app-bar-theme-on-background` custom property. Renamed `--tyl-omnibar-background-color` custom property to `--forge-app-bar-theme-background`\\" />\\n  <CheckboxListItem heading=\\"Omnibar search\\" description=\\"Renamed `--tyl-omnibar-search-background-color-hover` to `--forge-app-bar-search-theme-background-focused`, `--tyl-omnibar-search-disabled-opacity` to `--forge-app-bar-search-theme-disabled-opacity`, and `--tyl-omnibar-search-background-color` to `--forge-app-bar-search-theme-background`.\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"Replace `surface` theme with `elevated-surface`.\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Renamed `--tyl-select-background-color` to `--forge-select-theme-background`.\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Replace `text-hint-on-background` with `label-disabled-on-background` for disabled label color\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Replace `--mdc-theme-form-field-invalid-on-background` with `--forge-select-theme-background` for invalid background color\\" />\\n  <CheckboxListItem heading=\\"Skeleton\\" description=\\"Renamed `--tyl-skeleton-background-color` to `--forge-skeleton-theme-background`, `--tyl-skeleton-animation-color` to `--forge-skeleton-theme-gradient`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `enabled-hover-background` with `row-hover-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `enabled-active-hover-background` with `row-active-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `selected-background` with `row-selected-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `selected-hover-background` with `row-selected-hover-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `selected-active-hover-background` with `row-selected-active-background`.\\" />\\n  <CheckboxListItem heading=\\"Toast\\" description=\\"Removed `text-primary-on-elevated-surface` and `on-elevated-surface` theme to use `--forge-toast-theme-on-background` instead.\\" />\\n  <CheckboxListItem heading=\\"Toast\\" description=\\"Remove `elevated-surface` theme to use `--forge-toast-theme-background` instead.\\" />\\n  <CheckboxListItem heading=\\"Tooltip\\" description=\\"Renamed `--tyl-tooltip-background-color` to `--forge-tooltip-theme-background`, `--tyl-tooltip-color` to `--forge-tooltip-theme-on-background`.\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Renamed `--tyl-text-field-background-color` to `--forge-text-field-theme-background`.\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Replace `text-hint-on-background` with `label-disabled-on-background` for disabled label color\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Replace `--mdc-theme-form-field-invalid-on-background` with `--forge-text-field-theme-background` for invalid background color\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"Replace `--mdc-theme-error-hover` with `--forge-theme-error-hover`\\" />\\n\\n</details>\\n\\n---\\n\\n## How to upgrade?\\n\\nThe upgrade process can be broken down into several well-defined steps.\\n\\n:::note\\nPlease note that in [step 2](#step-2-find--replace-automated) we have created an automated upgrade utility that you can use on your projects to do most of the heavy lifting!\\n:::\\n\\n### Step 1: dependencies\\n\\nThe first thing we want to take care of is to fix our dependencies. This will immediately break a lot of things in our app.\\n\\nBelow is a mapping table of old vs new package names. Your application(s) will not make use of all of these, but please\\nevaluate and replace the dependencies within your `package.json` (where applicable) with the corresponding equivalent\\npackage noted in the \\"New Package Name\\" column.\\n\\n| Old Package Name                            | New Package Name\\n| ------------------------------------------- | ------------------\\n| `@tylertech/tyler-components-web`           | `@tylertech/forge`\\n| `@tylertech/tyler-components-web-angular`   | `@tylertech/forge-angular`\\n| `@tylertech/tyler-components-web-react`     | `@tylertech/forge-react`\\n| `@tyler-components-web/core`                | `@tylertech/forge-core`\\n| `@tyler-components-web/cli`                 | `@tylertech/forge-cli`\\n| `@tylertech/build-tools`                    | `@tylertech/forge-build-tools`\\n| `@tyler-components-web/testing`             | `@tylertech/forge-testing`\\n| `node-sass`                                 | `sass`\\n\\n<br/>\\n\\nNext if you have the `@tylertech/tyler-icons` package installed, make sure it is at least version `^1.12.0`. We will need this version of\\nthe package to access a new icon that will be used in the app-bar later on. If you don\'t have it explicitly installed then you can ignore\\nthis because this version is already installed as a dependency of `@tylertech/forge` with the correct minimum version for you.\\n\\n:::info\\nIt\'s worth noting that all of the new Forge-branded packages will be starting at version 2.0 to keep consistent with being an\\nevolution of the TCW library, we\'re just using new packages for better organization per the branding requirements.\\n:::\\n\\n### Step 2: find & replace (automated)\\n\\nThis step is the core of the upgrade process. We need to fix TCW references to the use the new Forge naming convention, and\\nupgrade any renamed APIs that we can without manually assessing each usage (we\'ll save that step for the end).\\n\\nYou\'re in luck! This process has been taken care of for you, if you choose to use it that is. We have gone ahead and created a utility\\nthat you can run on your project(s), and it will handle as many of the updates as it can. There are still some manual adjustments\\nthat you will need to evaluate after this utility is run, but it should get you _most_ of the way there.\\n\\n<details>\\n  <summary>View instructions</summary>\\n\\n:::info Important\\nBefore continuing with the automated utility, please ensure that you have source control configured or a backup created\\nas this is a one-way street...\\n:::\\n\\n  Please run the following to install the utility globally on your machine:\\n\\n  ```bash\\n  npx @tylertech/forge-upgrade --configuration forge-2.0\\n  ```\\n\\n:::info\\nIf you receive an error during installation, it is likely due to you not having a global `.npmrc` file on set up on your system\\nOR you\'re not logged in to the registry from the command line.\\n\\nto fix this, either configure an `.npmrc` in your user-level directory on your system, or log in to the registry with\\nnpm login --registry https://tylertech.jfrog.io/tylertech/api/npm/npm/` using your Artifactory credentials.\\n:::\\n\\n  The `forge-upgrade` utility will take `--path` as an argument and find all files in your project and attempt to replace the usages with the new APIs.\\n\\n  ```bash\\n  npx @tylertech/forge-upgrade --configuration forge-2.0 --path <relative/path/to/source/directory>\\n  ```\\n\\n  The utility will accept the following arguments:\\n\\n  - `--path <path>` **(required)**\\n    - Accepts a relative path from the current directory to the source directory where the upgrade should begin from.\\n  - `--configuration <name>` (optional, defaults to latest)\\n    - The name of the upgrade configuration to use. **Defaults to most recent configuration, so we need to specify `forge-2.0` when upgrading from TCW 1.x.**\\n  - `--dry-run` (optional, recommend on initial execution)\\n    - Runs the utility without modifying any files and prints out what it would do if ran without this flag.\\n  - `--ignore` (optional)\\n    - Paths or globs of files to ignore. (ex. `--ignore \\"**/*/my-directory/**/*\\"`).\\n    - Note: separate multiple values with a comma.\\n\\n  :::info Important\\n  It is recommended that you run the utility initially with the `--dry-run` argument to evaluate which files will be adjusted to get an idea\\n  about whether the `--ignore` argument should be used.\\n  \\n  The utility will automatically ignore `node_modules` directories.\\n  :::\\n\\n  To get a better idea of what it is doing, or if you need to manually upgrade, see below.\\n\\n  For example, element names are changing:\\n\\n  ```html\\n  <tcw-avatar>\\n\\n  // Now becomes\\n\\n  <forge-avatar>\\n  ```\\n\\n  and CSS custom properties and classes follow suit as well:\\n\\n  ```html\\n  <body class=\\"tyl-typography\\" style=\\"--mdc-theme-tertiary: red;\\">\\n\\n  // Now becomes\\n\\n  <body class=\\"forge-typography\\" style=\\"--forge-theme-tertiary: red;\\">\\n  ```\\n\\n:::info\\nAll MDC-related CSS custom properties have been left unchanged (for now). In a future update, we will be\\nabstracting those items and renaming them as well!\\n:::\\n\\n  Finally, wherever we can, various interfaces, APIs, component names... etc. will be updated as well. There are many changes\\n  that cannot be made automatically on your behalf, and those will be up to you to assess and upgrade manually. Please see the next step to \\n  start that process.\\n\\n  To view an exhaustive list of replacements, see the upgrade utility source code [here](https://github.com/tyler-technologies-oss/forge-upgrade/blob/main/configurations/forge-2.0.json).\\n\\n</details>\\n\\n### Step 3: manual evaluation\\n\\nAs noted above, the automated utility cannot handle everything without making assumptions on your behalf. This is where you must read the\\nbreaking change details and determine if they affect your application or library. We wanted to make sure to note every possible change\\nthat could affect your application, but we expect that most applications will only require updates to a subset of the following.\\n\\n[View breaking changes](#breaking-changes-)\\n\\n:::info\\nThe breaking changes list includes changes that the automated utility handles, but please validate that the changes were made successfully\\nand accurately during your evaluation.\\n:::\\n\\n### Step 4: build and test application/library\\n\\nNow is the time to cross your fingers and attempt to build and run your application. At this point you probably feel as if you just completely broke everything, but\\nI can assure you that you are very close! Any build errors you get at this point will either be things the automated utility couldn\'t handle for you, or that you\\ndidn\'t realize you were using from the list of breaking changes above.\\n\\n:::info Important\\nIf you come across any problems that are not noted in the breaking changes list, please let us know ASAP so we can help you get it fixed and update\\nthis guide for others that may also come across it.\\n:::\\n\\nOnce you get your application building and running locally, it\'s time to manually validate everything by testing it out from a user\'s perspective. Navigate around your\\napp and look for any inconsistencies, broken features, or anything that may be out of place. Expand the section below for common visual inconsistencies you may run into:\\n\\n<details>\\n  <summary>View features</summary>\\n\\n  <CheckboxListItem heading=\\"Form fields\\" description=\\"You will likely notice a difference in spacing between your form fields (text-field, select, autocomplete, date-picker, ...etc.). This is due to the internal top/bottom `margin` being removed on the text-field and select components (supporting the older notched outline style). It is expected that you will update your layouts to add your own `margin`, or even better use the `gap` property with flex/grid layouts!\\" />\\n  <CheckboxListItem heading=\\"Circular progress\\" description=\\"The new circular-progress component (replacing the old progress-spinner) removes `stroke-width` and `diameter` attributes in favor of CSS custom properties. See component docs for details.\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"The `<forge-card>` no longer has any default `margin-bottom`. This is intended to be left up to application developers.\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"The `<forge-card>` no longer has an internal grid layout with header and footer slots. Use an internal `<forge-scaffold>` if you need to retain those layouts.\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"The `<forge-card>` no longer has a `has-padding` property/attribute. Use the `--forge-card-padding` CSS custom property to control that now from CSS.\\" />\\n\\n</details>\\n\\n### Step 5: evaluate new features\\n\\nSince we\'ve made it this far, we might as well introduce the good part. While we were introducing breaking changes across the library, we also took that time\\nlook at the feedback we\'ve received about various components and introduce some new features! Please review the list of new features below!\\n\\n<details>\\n  <summary>View features</summary>\\n\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"All popup positioning logic has been rewritten and improved to fix many of the outstanding bugs related to these elements not being positioned correctly.\\" />\\n  <CheckboxListItem heading=\\"Scaffold\\" description=\\"Added new `left` and `right` slots that allow for full-height content to be placed next to all other content within the scaffold.\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"Fixed various theming issues across the library in regards to the wrong variables being used, and incompatibility with our built-in dark theme.\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"Scrollbar styles have been adjusted to be less intrusive, but offer CSS custom properties for customization.\\" />\\n  <CheckboxListItem heading=\\"Slider\\" description=\\"Added new \'range\' functionality for specifying a start and end value in the same slider.\\" />\\n  <CheckboxListItem heading=\\"Component delegates\\" description=\\"Component delegate classes have been created for most interactive components across the library. This helps encapsulate the DOM creation and configuration process for a more streamlined development experience when instantiating new component instances imperatively.\\" />\\n\\n</details>\\n\\n### Step 6: public vs Tyler-specific components\\n\\nAs noted earlier, part of the Forge 2.0 process is to release the core/generic components to the open source community. While _most_ components are already \\ngeneric enough, there are a few components that are still specific to Tyler, and we need to keep those internal and distribute them within a different package.\\nThis will also provide us a library to share more domain specific components as we need them in the future!\\n\\n:::info\\nWe converted the omnibar component to app-bar to make it generic enough for public consumption.\\n:::\\n\\nThe Forge 2.0 internal components can be installed via the `@tylertech/forge-internal` package, and is used exactly the same way the standard Forge components are.\\n\\nThe following are the only components available in the internal package (as of May 2022):\\n\\n- `<forge-app-launcher-button>`\\n- `<forge-footer>`\\n- `<forge-landing-page-layout>`\\n\\n:::info\\nFor those of you that are using React, we also created a corresponding `@tylertech/forge-react-internal` package that you can install to access the\\nReact wrapper components for these internal components.\\n\\nThere is no need for an Angular adapter library for the internal components at this time!\\n:::\\n\\n---\\n\\n## Sass modules\\n\\nThe conversion from the Sass `@import` statement to Sass modules (`@use`) is fairly straightforward, but does introduce a shift in how CSS is generated, as well as how Sass mixins,\\nvariables, functions... etc. are shared across files. While not required, it is highly recommended that you update your own Sass files to use the new syntax.\\n\\nHere are some details that you may find helpful during this process:\\n\\n<details>\\n  <summary><b>Automated</b></summary>\\n\\n  The Sass team provides an migrator utility that can be used to automate the conversion of your Sass files to the latest and greatest features of the language (including the\\n  conversion to Sass modules). You can find information about the migrator utility [here](https://sass-lang.com/documentation/cli/migrator).\\n\\n</details>\\n\\n<details>\\n  <summary><b>Manual</b></summary>\\n\\n  If you prefer to migrate your code manually, you can find more information about the new `@use` syntax [here](https://sass-lang.com/documentation/at-rules/use). This guide will\\n  walk you through what a module is, and how to convert from the `@import` syntax.\\n\\n</details>\\n\\n:::info\\nThere is another great article regarding Sass modules on CSS-Tricks [here](https://css-tricks.com/introducing-sass-modules/) that you may find helpful.\\n:::\\n\\nPlease reach out to the Forge team if you need assistance!\\n\\n---\\n\\n## Omnibar (aka App bar)\\n\\nAs you\'ve likely seen by now, the `<tcw-omnibar>` has been renamed to `<forge-app-bar>` (including all related sub-components). Before moving on I wanted to draw attention to this change, as \\nsome of the `slot` names have changed, and the default logo has been removed.\\n\\nIf you used the automated utility to upgrade, then the naming of the element(s) _should_ have been updated for you. You will still want to evaluate your usage of the `slot` names though.\\nExpand the example below to see how the app-bar is expected to be used now:\\n\\n<details>\\n  <summary>View example</summary>\\n\\n  The slot names have been renamed to be more logical, rather than named after the content they were intended to hold.\\n\\n  - `menu` slot renamed to `start`\\n  - `user-action` slot **removed**. Use `end` slot.\\n  - `action` slot **removed**. Use `end` slot.\\n  - `profile` slot renamed to `end`\\n\\n  Additionally, the default Tyler logo that was built-in to the omnibar before has been removed. It\'s expected that each application will render this icon manually now\\n  in the `logo` slot.\\n\\n  ```html expanded\\n  <forge-app-bar id=\\"forge-app-bar-example\\" title-text=\\"App bar\\">\\n    \x3c!-- \\"start\\" slot --\x3e\\n    <forge-app-bar-menu-button slot=\\"start\\"></forge-app-bar-menu-button>\\n\\n    \x3c!-- \\"logo\\" slot --\x3e\\n    <forge-icon slot=\\"logo\\" name=\\"tyler_talking_t_logo\\"></forge-icon>\\n\\n    \x3c!-- \\"center\\" slot --\x3e\\n    <forge-app-bar-search id=\\"app-bar-search\\" slot=\\"center\\"></forge-app-bar-search>\\n\\n    \x3c!-- \\"end\\" slot --\x3e\\n    <forge-app-bar-help-button slot=\\"end\\"></forge-app-bar-help-button>\\n    <forge-app-bar-notification-button slot=\\"end\\"></forge-app-bar-notification-button>\\n    <forge-app-launcher-button slot=\\"end\\"></forge-app-launcher-button>\\n    <forge-app-bar-profile-button slot=\\"end\\"></forge-app-bar-profile-button>\\n  </forge-app-bar>\\n  ```\\n\\n:::info\\nWhen setting up the icon for the logo. We have added the same Tyler Talking T logo that was built-in before to the `@tylertech/tyler-icons` package. You will\\nneed at least version `1.12.0` of this package to have access to that icon. The only other requirement on top of the snippet above is to ensure you define\\nthe icon within the `IconRegistry`. Note: This version is set as a dependency of `@tylertech/forge` package for you.\\n:::\\n\\n</details>\\n\\n---\\n\\n## VS Code Extension\\n\\nFor those of you that have been using the TCW Snippet extension for VS Code, you\'ll be happy to know that we have also created a new version of the extension for \\nthe Forge 2.0 components!\\n\\nTo install the new extension, please click [here](/assets/cdn/files).\\n\\n---\\n\\n## Open source\\n\\nAs we continue to prepare repositories and packages for release to the open source community, we will eventually be exposing them to the public. This means that\\nthe npm packages will soon be published to the public [npm](https://npmjs.com) registry. We\'ll post another announcement when that time comes because it will require\\nthat you reinstall the packages in your application(s) to ensure that the `package-lock.json` and SHA hashes are updated properly to point to the new packages.\\n\\nThe packages will still be installed through Artifactory, but we\'ll need to purge the previously installed versions and re-cache them in JFrog as they will be coming\\nthrough the public npm registry as if it was any other third-party package.\\n\\nThis process _should_ be seamless, but we wanted to give you a heads up that it will be coming at some point soon.\\n\\n---\\n\\n## What\'s next for Forge components?\\n\\nTCW has been a successful project for many years internally within Tyler. We are happy to announce that we are sharing Forge (previously TCW) with the public open source community!\\nThis is exciting as it will help Forge improve via external contributions, and allow Tyler to give back to the open source community.\\n\\n<details>\\n  <summary><b>Long term goals</b></summary>\\n\\n\\n  - Abstract MDC-related code, styles, classes, and custom properties into a Forge-owned style abstraction library with its own Forge-specific naming conventions.\\n    - We want to more easily allow for swapping out internals and not rely so heavily on MDC and utilize it more like a hidden dependency.\\n  - Refactor the component architecture to more easily allow for functionally extending components via JavaScript with desired features or overriding existing functionality.\\n    - We want to allow for component library authors to build their own components on top of Forge more easily as a library itself with customized functionality.\\n  - Allow for more easily theming the library to match any design system.\\n    - This is already underway, and will be part of the style abstraction layer mentioned in the first bullet, but this is a separate goal in itself as part of that larger undertaking.\\n  - Continue to build new components as they are needed.\\n  - Continue to improve the underlying build pipeline to take advantage of modern tools that increase performance.\\n  - Update dynamic elements to use stay static in the layout instead of being constructed on-the-fly. This will greatly improve developer usage and experience.\\n\\n\\n</details>\\n\\n---\\n\\n## Upgrade complete \ud83d\ude80\\n\\nThis upgrade has been in the works for a long time, and we\'re very happy to finally release it! We hope you like the changes, and hopefully the upgrade process went as smoothly\\nas it could given all of the breaking changes. This _should_ set us up very nicely for the future to avoid having to make such a large change as we continue to maintain Forge.\\n\\n### Important links\\n\\nBelow are some important links that you will want to make note of:\\n\\n- [Forge 2.0 repository](https://github.com/tyler-technologies/forge)\\n- [Forge 2.0 Storybook documentation](https://forge.tylerdev.io/)\\n- [Forge 2.0 internal repository](https://github.com/tyler-technologies/forge-internal/)\\n- [Forge 2.0 Core repository](https://github.com/tyler-technologies/forge-core/)\\n- [Forge 2.0 Angular adapter repository](https://github.com/tyler-technologies/forge-angular/)\\n- [Forge 2.0 React adapter repository](https://github.com/tyler-technologies/forge-react/)\\n- [Forge 2.0 internal React adapter repository](https://github.com/tyler-technologies/forge-react-internal/)\\n- [TCW v1.x repository](https://github.com/tyler-technologies/tyler-components-web)\\n- [TCW v1.x Storybook documentation](https://tyler-technologies.github.io/tyler-components-web/)\\n\\nPlease let us know if you have any questions, concerns, or if you run into any issues at all and we\'ll be glad to help \ud83c\udf7b"},{"id":"/2020/05/06/package-dependencies","metadata":{"permalink":"/blog/2020/05/06/package-dependencies","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2020-05-06-package-dependencies/index.md","source":"@site/blog/2020-05-06-package-dependencies/index.md","title":"Forge and package dependencies","description":"In order to optimize Forge use, teams should avoid creating libraries from Forge components and should ensure that the components are kept up to date.","date":"2020-05-06T00:00:00.000Z","tags":[{"inline":true,"label":"tcw","permalink":"/blog/tags/tcw"},{"inline":true,"label":"forge","permalink":"/blog/tags/forge"},{"inline":true,"label":"components","permalink":"/blog/tags/components"},{"inline":true,"label":"npm","permalink":"/blog/tags/npm"}],"readingTime":4.055,"hasTruncateMarker":true,"authors":[{"name":"Ross Blakeney","title":"Lead Software Engineer","url":"https://github.com/Ross-Blakeney","imageURL":"https://github.com/Ross-Blakeney.png","key":"ross.blakeney","page":null}],"frontMatter":{"tags":["tcw","forge","components","npm"],"authors":["ross.blakeney"]},"unlisted":false,"prevItem":{"title":"Forge 2.0 Upgrade","permalink":"/blog/2022/05/02/upgrade-guide-forge-2"}},"content":"In order to optimize Forge use, teams should avoid creating libraries from Forge components and should ensure that the components are kept up to date. \\n\\n:::info TL;DR\\n* Never set Forge as a dependency of a package. Set Forge as a peer dependency only.\\n* Always keep Forge within the same major version in all your apps and packages.\\n\\nIt\'s worth noting that this concept applies to **any** package that you want as a dependency of your library, but you want to allow for the consumer/dependent to control the version for compatibility with multiple versions of the library in question.\\n:::\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## Overview\\n\\n**Never list Forge in the `dependencies` array for your own library package. Use `peerDependencies` instead.**\\n\\nThere are a few key points we need to review.\\n\\n### NPM jargon\\n\\n- Package - any npm package. Typically, a library.\\n- Dependency - an external package that will be *copied into your package* at the version you specify in the `package.json`.\\n- Peer dependency - an external package that must be *provided by the dependent*.\\n  - A peer dependency is *not* copied into your package.\\n  - The application that your package is included in **must** provide the peer dependency.\\n\\n### Custom elements\\n\\n- Custom elements are one of the three main pieces of what makes up a Web Component. Web components are at the core of Forge.\\n- The `CustomElementRegistry` is a dictionary (useful oversimplification) of all of the custom elements registered in the browser. The custom element\u2019s name acts as the key, and the `class` is the value.\\n  - All keys/element names must be unique.\\n\\n### What not to do\\n\\n:::info\\nLet\u2019s say you created a new library package to use across a few of your apps. We\u2019ll call it `fooLib`. In this example, `fooLib` declares `Forge v2.0.0` as a dependency. So `Forge v2.0.0` is *copied* into `fooLib`.\\n\\nIn your app, `barApp`, you declare `Forge v3.5.0` as a dependency. `barApp` also declares `fooLib` as a dependency.\\n\\nThis results in Forge being included in your app *twice*. Once for your app at `v2.0.0` and once for your library at `v3.5.0`.\\n:::\\n\\n### Why it\u2019s a problem\\n\\nThere are several reasons you wouldn\u2019t want to do this. First of all, your application is needlessly bloated by including Forge twice. But that is outside the scope of this document. We\u2019ll focus on the issue this causes with custom elements.\\n\\nSince `barApp` now runs with 2 copies of Forge, that means it will potentially attempt to register 2 different versions of each component in Forge. Remember the browser\'s `CustomElementRegistry` is effectively a dictionary. So you can\u2019t register two different custom elements under the same key. So what happens is that whatever version registers first \u201cwins\u201d.\\n\\nAs an example, let\u2019s say `forge-selector v2.0.0` gets registered first for `fooLib`. Then later, `forge-selector v3.5.0` attempts to register for `barApp`. The key \\"forge-selector\\" is already registered, so the second registration attempt fails silently. But now `barApp` is stuck with `forge-selector v2.0.0`. Let\u2019s say the newer version of `forge-selector` had added type-ahead functionality that we\u2019re utilizing in `barApp`. However, now that the older version registered first, anywhere we\u2019re using that new type-ahead feature is now broken with little to no leads as to what happened.\\n\\nHopefully, that illustrates the reason you wouldn\u2019t ever want to set Forge as a dependency of a package.\\n\\n---\\n\\n## Peer dependencies\\n\\nSo how do we safely manage Forge versions?\\n\\nIf you need to create a library that utilizes Forge, declare it as a peer dependency for the reasons mentioned above.\\n\\nThis means that your new library will need to implement Forge according to the version dictated by your dependent applications.\\n\\nGoing back to our earlier example involving `fooLib` and `barApp`. This time, `fooLib` declares Forge as a peer dependency.\\n\\n:::info\\nIn this case, Forge is only included once in the application at `v3.5.0`. Since it\u2019s included only once (by the application) there are no registration conflicts with any of the custom elements. But now `fooLib` is using `Forge v3.5.0` when it was originally implemented using `Forge v2.0.0`. Obviously, this can still lead to breaking changes in the Forge components since `fooLib` could be using features that no longer exist in `Forge v3.5.0`.\\n:::\\n\\nThe solution is that both `fooLib` and `barApp` need to be kept within the same major version.\\n\\nForge follows [semver](https://semver.org/) versioning practices. So we will not (intentionally) introduce any breaking changes within the same major version of Forge.\\n\\nSo if `fooLib` had a *peer* dependency of `Forge v1.0.1` and `barApp` had a dependency of `Forge v3.5.0`, there would be no breaking changes and both would work as expected.\\n\\n---\\n\\n## In summary\\n\\n- When possible, avoid including `dependencies` (of any kind) in your packages.\\n- Use `peerDependencies` where it cannot be avoided.\\n- Always keep your apps and packages within the same major version of Forge."}]}}')}}]);