"use strict";(self.webpackChunkforge_design_system=self.webpackChunkforge_design_system||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/02/10/split-view-component","metadata":{"permalink":"/blog/2023/02/10/split-view-component","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-02-10-split-view-component/index.md","source":"@site/blog/2023-02-10-split-view-component/index.md","title":"Split View Component","description":"The split view component arrived with Forge 2.9.0 a few months ago, finally giving us a way to develop resizable layouts without relying on third party libraries. This is a powerful tool that\'s been a long time in the making. It also has the potential to be a little confusing to use up front. This post will be an introduction to the split view, showing how you can use it and some of the thought that went into its development.","date":"2023-02-10T00:00:00.000Z","formattedDate":"February 10, 2023","tags":[{"label":"forge","permalink":"/blog/tags/forge"},{"label":"components","permalink":"/blog/tags/components"},{"label":"accessibility","permalink":"/blog/tags/accessibility"}],"readingTime":10.055,"hasTruncateMarker":true,"authors":[{"name":"Sam Richardson","title":"Front End Software Engineer","url":"https://github.com/samrichardsontylertech","imageURL":"https://github.com/samrichardsontylertech.png","key":"sam.richardson"}],"frontMatter":{"title":"Split View Component","decription":"Get to know the split view component.","authors":["sam.richardson"],"tags":["forge","components","accessibility"]},"nextItem":{"title":"Forge Website Redesign","permalink":"/blog/2023/02/03/forge-website-redesign"}},"content":"The split view component arrived with Forge 2.9.0 a few months ago, finally giving us a way to develop resizable layouts without relying on third party libraries. This is a powerful tool that\'s been a long time in the making. It also has the potential to be a little confusing to use up front. This post will be an introduction to the split view, showing how you can use it and some of the thought that went into its development.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Basics\\n\\nYou can get a split view on the screen with as little code as this:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel></forge-split-view-panel>\\n    <forge-split-view-panel></forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\nThis creates the default view \u2014 a two panel layout arranged horizontally.\\n\\n![Basic split view without content example](./images/split_view_basic.png)\\n\\nThis already looks promising. Just like that you get two content areas and a handle dividing them. Click on the handle (notice the slick ripple animation) and drag it around to change the relative size of the panels.\\n\\nIt\'s pretty hard to differentiate the panels like this, though, so let\'s add in some content. While we\'re at it let\'s also make the right panel take up half the available space, up from the default 200 pixels.\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Basic split view with content example](./images/split_view_labelled.png)\\n\\n:::warning Responsive content\\nYou obviously can\'t rely on split view panel content to remain one size, so be extra careful to design anything you put in there to be responsive. Use flexible styling and always test it at different sizes.\\n:::\\n\\nIt\'s important to note that in this example only the right panel should be thought of as resizable. We\'ll get more into this later on, but for now know that by default the first panel automatically expands to fill the space left by its explicitly-sized siblings. If you need the left panel to resize instead you can use the `resizable` attribute to manually configure this.\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel resizable=\\"end\\" size=\\"50%\\">\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel resizable=\\"off\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\nWithout `resizable` set the split view assumes that the first panel isn\'t resizable and sets it for you. You may not have to mess with this very often, but when you do remember that at least one panel in any split view layout *must* have `resizable` set to off.\\n\\n:::tip Resizable\\nWhen you set `resizable` to `end` the handle gets added after the content. Set it to `start` to get the reverse, or `off` if you don\'t want a handle at all.\\n\\nIf your content can normally be resized but you want to conditionally prevent it, you can add a `disabled` attribute to the panel.\\n:::\\n\\n### Vertical split view\\n\\nAll you need to do for a vertical split view layout is set the `orientation` attribute on the component:\\n\\n```html\\n<forge-split-view orientation=\\"vertical\\">\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Vertical split view example](./images/split_view_vertical.png)\\n\\nThis is a nice layout to use when you\'re designing for a screen that\'s taller than it is wide, e.g. a phone. Get responsive and use a [media query](https://css-tricks.com/working-with-javascript-media-queries/) to track the browser\'s viewport size, switching between horizontal and vertical orientations on the fly to deliver the best experience.\\n\\n:::warning Pay attention to context\\nMake sure the container you put the split view in is a block element with height! The component expands to fill its container by default and may not work if it\'s unable to.\\n:::\\n\\n### Multiple panels\\n\\nWhat if you need more than two panels of content? The split view component can handle that. Add any number of panels to your view and they\'ll render just as you\'d expect.\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"33%\\">\\n        <div>Middle</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"33%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Split view with three panels example](./images/split_view_multiple.png)\\n\\nWhen you resize a panel in a setup like this it can only expand up to the point where the neighboring panel is as small as possible. So if you were to drag the right panel\'s handle in this example, the middle panel could shrink down to a width of zero pixels or expand to fill both panel\'s space but the left panel won\'t ever change size. \\n\\nThis also works in a vertical layout, of course.\\n\\n### Constraining sizes\\n\\nSometimes you don\'t want to give the user complete control over the size of your content. Maybe, as responsive as you were able to make your design, something just breaks when it gets too big or too small.\\n\\nFor cases like that we have the `min` and `max` attributes. Each takes a pixel amount or percentage and ensures that the panel it\'s set on will never resize past that boundary.\\n\\nThis code constrains the right panel to a width between 100 pixels and two thirds the width of the split view:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\" min=\\"100\\" max=\\"67%\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\nAnd this makes sure *neither* panel can get smaller than 180 pixels:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel min=180>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel size=\\"50%\\" min=\\"180\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n### Hiding panels\\n\\nIt\'s not always enough to simply minimize content. You may also want to give users the ability to completely hide a panel from view. Imagine you have something like a document viewer beside your other content. It\'s nice to be able to scale the viewer to your preferred size, but it doesn\'t make sense to have it up at all when nothing\'s open in it.\\n\\nThe `open` attribute is there to solve this problem. Set it to `true` to keep a panel visible, or `false` to hide it away with a quick animation (just like the Forge drawer component).\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel open=false>\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n![Split view with closed panel example](./images/split_view_closed.png)\\n\\nThe right panel here has its `open` attribute set to `false` and so is hidden from the view and assistive technology.\\n\\nPanels can also be configured to close automatically when they reach a certain size. Set `auto-close` to `true` to enable this at zero pixels, and `auto-close-threshold` to your desired pixel threshold if it differs.\\n\\n:::warning Opening panels\\nBecause the entire panel, along with its handle, goes away when closed, there\'s no built in way to open a closed panel. You must provide your own UI to control this.\\n:::\\n\\n## How it works\\n\\nAt its heart the split view component is a [flex](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox) container with some extra logic to manage communication between its children. Panels with `resizable` set to `off` grow and shrink to fill space simply because they have their CSS [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property set to `1`.\\n\\nOther panels have their widths explicitly set via JavaScript. When a user begins resizing, the panel get its size and the initial pointer location. As the pointer moves the initial and updated locations are continually compared to produce a delta value which is then added to the starting size to produce the new size.\\n\\nTypically computations involving rapid reads and write to the DOM are expensive because they trigger reflows affecting every element on the page. The split view attempts to improve performance by doing the necessary reads at the beginning of the process and delaying other calculations until the resize has ended. It also makes use of the [`contain`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) CSS property to restrict how much of the page is involved in reflows that do happen.\\n\\nWhen a resize has ended, the affected panel signals its siblings to recalculate their properties via their parent split view.\\n\\n## Accessibility\\n\\nThe single point of interaction for each split view panel is its handle. This is the element that, aside from being draggable via mouse, receives keyboard focus and provides the panel\'s semantic information.\\n\\nThe semantics piece is why it\'s important to understand which handle controls each panel and by extension which panels are resizable (calling back to the beginning of the post). Each panel **must** be labelled to properly expose it to assistive technology. We do that with the `accessible-label` attribute, which sets the interior `aria-label` property of the handle:\\n\\n```html\\n<forge-split-view>\\n    <forge-split-view-panel>\\n        <div>Left</div>\\n    </forge-split-view-panel>\\n    <forge-view-panel accessible-label=\\"Right\\">\\n        <div>Right</div>\\n    </forge-split-view-panel>\\n</forge-split-view>\\n```\\n\\n:::info Labels\\nEach of the previous examples in this post should have had labels set. The only reason they were omitted up until this point was for readability.\\n:::\\n\\nThe label should be a short and simple description of the panel\'s content. Think of it as another heading on the page. In one of the previous examples we might have set it to \\"Document viewer\\". Note that there\'s no need to include the word \\"panel\\", \\"handle\\" or anything like that.\\n\\nAlso note that the left panel doesn\'t have a label. This is because it is not resizable, which means it doesn\'t have a handle and therefore doesn\'t provide any semantic information. Even if you did set a label, it would never make it to the DOM anyway.\\n\\nWith this in mind you might see why we\'d choose one panel to be resizable over another. It\'s often the secondary, \\"aside\\" or \\"detail\\" content that makes more sense as resizing. Whether that ends up on the left, right, top, or bottom is up to you.\\n\\nThere are other accessible attributes set on the handle as well, though most developers will never have much need the think about them here. These include:\\n- `role=separator`\\n- `aria-orientation`, either `vertical` or `horizontal`\\n- `aria-valuemin`, `aria-valuemax`, and `aria-valuenow`\\n- `aria-grabbed`, reflecting whether it\'s currently being dragged\\n- `aria-controls` pointing to the content element\\n\\nThese attributes, and more interesting things about this sort of component, are detailed in [MDN\'s docs on the separator role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role). \\n\\n### Keyboard interaction\\n\\nTo empower screen reader users and anyone who prefers to navigate with their keyboard, all the functionality of the split view component is available through keyboard shortcuts.\\n\\nWhen a panel\'s handle is focused the arrow keys will expand or collapse it (faster if combined with the shift key) and the home and end keys minimize and maximize it, respectively. This is all pretty straightforward so far.\\n\\nThere\'s one more shortcut available but you\'ll have to enable it manually \u2014 set the `allow-close` property and a press of the enter/return key will close the panel. As noted before, if a panel closes there\'s no built-in UI to reopen it, so don\'t forget to account for that in your design.\\n\\n## Customization\\n\\nMost of the split view component\'s appearance is defined by the content you place in it. Its only obvious UI element is the handle between panels. That said, each internal element has a [part selector](https://developer.mozilla.org/en-US/docs/Web/CSS/::part) to allow you to style it however you want.\\n\\nThe split view itself only exposes one part, `root`.\\n\\nThe panel has a few more:\\n- `root`: The container element.\\n- `handle`: The handle element.\\n- `icon`: The icon *inside* the handle element.\\n- `ripple`: The ripple that activates when the handle is interacted with.\\n- `content`: The container around the content you slot in.\\n\\nThe other day I was working on an app and wanted to switch up how my split view looked. I ended up writing this bit of SCSS:\\n\\n```scss\\nforge-split-view {\\n  &[orientation=vertical] {\\n    --app-split-view-handle-icon-width: 32px;\\n    --app-split-view-handle-icon-height: 4px;\\n  }\\n\\n  &[orientation=horizontal] {\\n    --app-split-view-handle-icon-width: 4px;\\n    --app-split-view-handle-icon-height: 32px;\\n  }\\n\\n  forge-split-view-panel {\\n    &::part(icon) {\\n      background-color: var(--mdc-theme-text-secondary-on-light);\\n      height: var(--app-split-view-handle-icon-height);\\n      width: var(--app-split-view-handle-icon-width);\\n      border-radius: 2px;\\n    }\\n  }\\n}\\n```\\n\\nThis snippet sets height and width variables based on the split view\'s orientation then uses those to turn the icon element into a little pill shape.\\n\\n![Split view with custom icon example](./images/split_view_custom_icon.png)\\n\\nYou don\'t necessarily have to dig into it like that to change up the style though. These [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) are also available to do some simple customization:\\n- `--forge-split-view-handle-width`: Controls the handle width.\\n- `--forge-theme-border-color`: Controls the handle color.\\n- `--mdc-theme-text-secondary-on-light`: Controls the icon color.\\n\\n## Conclusion\\n\\nA lot of hard work went into developing the split view component to be as robust, accessible, and developer friendly as possible. As more teams start to use it we\'re looking forward to seeing what new kinds of layouts and user interactions it enables. For more in depth info and to test it out for yourself, check out our [developer documentation in Storybook](https://forge.tylerdev.io/main/?path=/story/components-split-view--default)."},{"id":"/2023/02/03/forge-website-redesign","metadata":{"permalink":"/blog/2023/02/03/forge-website-redesign","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2023-02-03-forge-website-redesign/index.md","source":"@site/blog/2023-02-03-forge-website-redesign/index.md","title":"Forge Website Redesign","description":"Welcome to the new and improved Forge design system website!","date":"2023-02-03T00:00:00.000Z","formattedDate":"February 3, 2023","tags":[{"label":"forge","permalink":"/blog/tags/forge"},{"label":"design-system","permalink":"/blog/tags/design-system"},{"label":"welcome","permalink":"/blog/tags/welcome"}],"readingTime":6.725,"hasTruncateMarker":true,"authors":[{"name":"Nick Andrews","title":"Senior UX Designer","url":"https://github.com/nickonometry","imageURL":"https://github.com/nickonometry.png","key":"nick.andrews"},{"name":"Jay McCormick","title":"Senior Product Owner","url":"https://github.com/jayexprs","imageURL":"https://github.com/jayexprs.png","key":"jay.mccormick"},{"name":"Eric Wayne","title":"Senior UX Designer","imageURL":"https://cdn.forge.tylertech.com/v1/icons/svg/standard/account_circle.svg","key":"eric.wayne"},{"name":"Kathy Wolf","title":"UX Director","imageURL":"https://cdn.forge.tylertech.com/v1/icons/svg/standard/account_circle.svg","key":"kathy.wolf"},{"name":"Kieran Nichols","title":"Lead Software Engineer","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols"}],"frontMatter":{"title":"Forge Website Redesign","decription":"Welcome to the new and improved Forge design system website.","authors":["nick.andrews","jay.mccormick","eric.wayne","kathy.wolf","kieran.nichols"],"tags":["forge","design-system","welcome"]},"prevItem":{"title":"Split View Component","permalink":"/blog/2023/02/10/split-view-component"},"nextItem":{"title":"Forge 2.0 Upgrade","permalink":"/blog/2022/05/02/upgrade-guide-forge-2"}},"content":"Welcome to the new and improved Forge design system website!\\n\\nThis is the first step toward a larger goal of open sourcing the design system so that it is publicly accessible. We are hoping to share the great work\\nthat the Forge team has done with the public community, as well as provide a design system to go along with our open source Forge Web Component library.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this first release of the new website, we have largely kept the content the same, although we have reorganized it, improved naming conventions, and audited the content to correct our guidance. However, we expect to continue refining this design documentation, including deprecating content, moving content to locations outside of the design docs, and adding entirely new content. \\n\\nBelow we highlight what to expect with this update.\\n\\n## Landing page and navigation\\n\\nOne of the first changes you\'ll notice is to the landing page and navigation structure of the website, from the top-level through to the organization of individual pages. These changes implement a new information architecture that make it easier to locate content and to show how different elements in the design system relate to each other. \\n\\nFor example, in the `/Components` section of the website, we have added component categories to group components by purpose or use. Previously, those components were presented in a single alphabetical list. In the new information architecture, it is easier to find a component or set of components based on the problem they are intended to solve.\\n\\n### Get started\\nOne of the key sections of the new website is `/Get started`, where we have consolidated the content previously grouped under \\"Core components\\" or \\"Core patterns\\". This new section provides product teams a single starting point for answering the question, \\"At a minimum, what does a Forge application include?\\" Moreover, this section provides a logical grouping for content, like typography, colors, branding, and icons that don\'t neatly fit into either a \\"components\\" or \\"patterns\\" category.\\n\\n## Development docs\\n\\nAs Forge grows and matures, we needed to change how we surface development documentation to our users. Previously we had development details embedded directly\\nin the Forge design system website. This was great for our users, but it falls down quickly when there are multiple versions of our component library and made\\nit very difficult from a maintenance perspective.\\n\\nWe were faced with this problem and needed to quickly determine how to best surface these important details. Our options were to either build a content versioning\\nsystem into our website, or link out to external documentation and keep the design system focused on, well, design. We opted to go for the latter which introduces\\na distributed content model.\\n\\n### Distributed content model\\n\\nAs you\'ve likely already noticed and used, we have moved developer documentation details and demos to Storybook. This tool was designed for component libraries to\\nshow live demos of components alongside API and usage documentation. This now allows for us to provide versioned component library documentation, and link to it \\nfrom the design system.\\n\\nWe will continue to follow this format as Forge continues to grow!\\n\\n## Tooling\\n\\nYou may have noticed that our website received a face lift, along with some new features! We learned over the past few years that maintaining\\ndesign system guidance and content can be daunting task, along with the task of maintaining various website features such as search, navigation,\\nlayout, ...etc. In an effort to reduce our maintenance overhead and focus more on the content you need, we have made the decision to switch from \\na custom solution built with Gatsby to a configuration-based solution called [Docusaurus](https://docusaurus.io/docs)!\\n\\n### Docusaurus\\n\\nWe believe that moving to Docusaurus will not only allow us to focus on what matters most, design system guidance and content, but also\\nenable us to make use of its great built-in features that will only provide benefits to our users that we were unable to provide without significant\\neffort in our old Gatsby-based solution.\\n\\nA quote from the Docusaurus docs:\\n\\n> Building a custom tech stack is expensive. Instead, focus on your content and just write Markdown files.\\nDocusaurus has many great benefits, but below are just a few that we\'d like to highlight:\\n\\n- Removes the need to build the website from scratch (aka site layout, navigation, search... etc.). It\u2019s generated for us instead based on file structure and configuration.\\n- Supports markdown and MDX, as well as custom React components\\n- N-level navigation (supporting our new IA)\\n- Fully theme-able\\n- Content versioning\\n- Localization\\n- Built-in blogging functionality\\n- Built-in full-text search\\n- Supports headless CMS integration\\n- We **build less** and **focus more on content**\\n\\n### Design\\n\\nYou\'ll notice if you inspect the site that we\'re no longer \\"eating our down dog food\\" if you will. This means that the site is no longer built with Forge components. We have learned\\nthat Forge was not necessarily designed for building documentation websites, and although we certainly can, we\'d prefer that folks use our guidance content to drive their design\\ndecisions instead of using the documentation website itself. This allows us to tailor our website toward being great for providing documentation instead of being an example\\nof enterprise application design.\\n\\n### Search\\n\\n**We have heard you!** The search functionality in the old Gatsby-based Forge website was mediocre at best... Docusaurus provides various built-in search options for us, and we are happy to announce that we now offer a much improved full-text search function. Give it a try in the header above!\\n\\n### Blog\\n\\nWe have struggled in the past with keeping our users up to date with the happenings of Forge, and we want to improve that. A blog is natural way to allow for us to make announcements,\\nand provide detailed information to you in a consistent location that you already use. We intend to use this blog section you\'re viewing right now to keep you up to date with everything from design to development as Forge grows and improves.\\n\\n:::info Please share!\\nIf you have any topics or announcements related to Forge, we would love for you to share it with everyone else! Please feel free to create posts here or reach out to us if you have questions.\\n:::\\n\\n## Next steps\\n\\nAs mentioned above, this is a conversion/translation from our old website to our new and improved one. This is just the first step as we look forward to open sourcing the design system\\n\\nBefore we are able to do that, we have a few things need to take care of:\\n\\n### Audit our content\\n\\nThere are portions of the Forge design system that we need to keep private, or things that just may not be valuable for people outside of Tyler to see. We need to audit\\nthe website and determine what content needs to be kept private to Tyler employees.\\n\\n### Forge \\"hub\\"\\n\\nIn an effort to keep the Forge ecosystem easy to navigate, we are looking into how to best surface everything Forge-related to Tyler employees, while still supporting our\\nnew distributed content model. This is where the concept of a Forge \\"hub\\" comes in. This hub of sorts will live in what is now forge.tylertech.com, but it may look a bit\\ndifferent. We\'re hoping to surface everything that you need to build Tyler applications here, and curating separate websites into a singular location that makes it easy \\nto find what you\'re looking for.\\n\\nMore to come on this soon!\\n\\n### Open source\\n\\nReleasing our design system to the open source community also means we need to host the website publicly. We intend to secure a new domain for this public version of Forge,\\nwhile allowing contribution from both Tyler employees and the public open source community.\\n\\nAn important thing to highlight about open sourcing, is that our contribution process becomes much easier. We have some answers to more easily allow non-technical folks to\\nprovide contributions to the design system content. More to come on this one as well in the future!"},{"id":"/2022/05/02/upgrade-guide-forge-2","metadata":{"permalink":"/blog/2022/05/02/upgrade-guide-forge-2","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2022-05-02-upgrade-guide-forge-2/index.md","source":"@site/blog/2022-05-02-upgrade-guide-forge-2/index.md","title":"Forge 2.0 Upgrade","description":"How to upgrade applications & libraries from TCW (1.x) to Forge 2.x.","date":"2022-05-02T00:00:00.000Z","formattedDate":"May 2, 2022","tags":[{"label":"forge","permalink":"/blog/tags/forge"},{"label":"components","permalink":"/blog/tags/components"},{"label":"upgrade","permalink":"/blog/tags/upgrade"}],"readingTime":37.05,"hasTruncateMarker":true,"authors":[{"name":"Kieran Nichols","title":"Lead Software Engineer","url":"https://github.com/drifty17","imageURL":"https://github.com/drifty17.png","key":"kieran.nichols"}],"frontMatter":{"authors":["kieran.nichols"],"tags":["forge","components","upgrade"]},"prevItem":{"title":"Forge Website Redesign","permalink":"/blog/2023/02/03/forge-website-redesign"},"nextItem":{"title":"Forge and package dependencies","permalink":"/blog/2020/05/06/package-dependencies"}},"content":"How to upgrade applications & libraries from TCW (1.x) to Forge 2.x.\\n\\n## Overview\\n\\nWelcome to the TCW/Forge upgrade guide! If you\'re looking for information about how to upgrade from TCW v1.x to Forge 2.0, you\'ve\\ncome to the right place.\\n\\nWith the next generation version of Tyler Components Web (TCW) now being generally available, you probably have a lot of\\nquestions about how to upgrade, what is happening with the previous version, what has changed... etc. This guide is intended\\nto walk you through the process of upgrading your applications and libraries, and answer all of the questions above and much more.\\n\\n:::info\\nYes, there are **breaking changes** that come with this upgrade, but we can assure you the process is not as daunting\\nas it may seem.\\n\\nPlease let us know if you run into any problems that are not documented in this guide!\\n:::\\n\\nLet\'s get started!\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## Rebranding\\n\\nThe most important part of this upgrade is to understand that the TCW project is being **rebranded** as \\"Forge\\" components! (aka Forge 2.0)\\n\\nTCW as it stands today is being **deprecated** and **replaced** with a new Forge-branded version of the library. You can think of Forge 2.0\\nas the next generation evolution of the TCW library.\\n\\n:::info\\nEssentially `@tylertech/tyler-components-web` is being replaced with an equivalent package called `@tylertech/forge`\\n:::\\n\\nThis likely doesn\'t come as a surprise to most, given that\'s how many have referred to the project over the years anyway. But,\\nthe main reason for this rebrand is to better align ourselves with our open source goals, and ensure that the library is more\\ntightly coupled with our Forge design system. This coupling will help ensure that we can these projects are more closely related,\\nand make it feel more cohesive going forward.\\n\\n:::note\\nThe functionality and design of the components has been largely left **unchanged** during this migration.\\n:::\\n\\nAs you may have guessed, this means that our naming convention across the library is changing from anything `tcw` or `tyl`-related,\\nto be just `forge`. More information about that below.\\n\\n---\\n\\n## Why the need for a new version?\\n\\nThis is an excellent question, and one we went back and forth on for quite some time before deciding a proper path forward.\\n\\nLet\'s start with a little history about TCW. The project started in May of 2017. It has taken on various forms over that\\nperiod of time, and **a lot** has been changed and been learned. Not only did we need to support legacy browsers like IE 11\\nat the time, we also had to compile our code to ES5 and make use of legacy polyfills for Web Component browser support.\\n\\nFast-forward 5 years and we have now found ourselves maintaining a library that was built for the past, has inconsistencies\\nin naming conventions and APIs, poorly structured components, and is unable to upgrade important internal dependencies for a\\nnumber of reasons. We also do not need to support ES5 or require the use of slow polyfills as Web Components are widely\\nsupported in all modern browsers.\\n\\nAt a high level, the items below are the most important reasons for this new version:\\n\\n<details>\\n  <summary><b>View details</b></summary>\\n\\n\\n  - Drop support for IE 11. We now support all latest versions of modern browsers.\\n    <details>\\n      <summary>Minimum browser support</summary>\\n\\n      - Google Chrome: `Version 54+`\\n      - Firefox: `Version 63+`\\n      - Safari: `Version 10.1+`\\n      - Opera: `Version 64+`\\n      - Edge (Chromium): `Version 79+`\\n      - Internet Explorer: `Not supported without downleveling JavaScript to ES5 and using polyfills`\\n\\n    </details>\\n  - Drop support for ES5. Our minimum build target is now ES8 (ES2017).\\n    - This helps improve performance and bundle sizes in downstream applications, and allows us to use newer, more modern browser APIs.\\n  - Remove the need for slow polyfills. No more `@webcomponents/webcomponentsjs` dependencies in your apps!\\n  - Upgrade our internal version of MDC from version 4 to version 13 (yes, we were that far behind) to support Sass modules.\\n    - The upgrade to support Sass modules requires a breaking change (this was actually reason #1 for the new version initially).\\n    - This also allows for us to take advantage of new features and designs that have been released since version 4.\\n  - Introduce consistent naming conventions and APIs across the library.\\n  - Refactor various components (that previously encapsulated multiple variants) into separate components to allow for easier maintenance and more obvious usage.\\n  - Prepare ourselves for the release of the Forge component library to the public open source community!\\n  - Improve our theming system to make theme customizations easier and more straightforward.\\n\\n\\n</details>\\n\\n<br/>\\n\\nAs you can see, there are many benefits to this upgrade, but what is going to happen to the existing version of TCW?\\n\\n---\\n\\n## What is happening to TCW 1.x?\\n\\nThe TCW 1.x version is going to continue to receive patch updates going forward as needed, but is essentially going into maintenance\\nmode with the goal to move **everyone** to the new Forge component library over time, and archive the 1.x version/repository. The new\\nversion provides many bug fixes, features, improved performance and is where all new features will be added going forward. It is a\\nmore modern implementation, with a lot of changes based on what we learned over the years from teams using TCW 1.x.\\n\\nWe plan to keep maintaining the 1.x version for a period of time to give teams a chance to upgrade to the new version, but it is now\\nofficially considered **deprecated** at this time. You should perform this upgrade at your earliest convenience.\\n\\nIf your team is facing issues with defining a timeline for upgrading, or if you have questions about the upgrade process, please reach\\nout to the Forge team for assistance!\\n\\n---\\n\\n## What is changing?\\n\\nThere are always breaking changes that come with major version upgrades. It\'s an unfortunate, but beneficial side-effect. It\'s\\nthe only way to innovate and keep up with the ever-changing web development ecosystem. That time has come.\\n\\nYou\'re probably thinking: \\"So what you\'re saying is I need to rewrite a lot of my code that I just wrote to start using Forge/TCW?\\"\\n\\nWe want to be very clear that this is **not** the case. This guide is intended to help you through this process, and after upgrading\\nseveral complex applications, we can assure you that it\'s actually quite a simple process, but it does require some attention. You\\nshould not need to adjust any of your application logic aside from just renaming a few APIs that are related to Forge.\\n\\nAt a high level, here is what is changing: \ud83d\ude48\\n\\n<details>\\n  <summary><b>View changes</b></summary>\\n\\n\\n  - Replace `node-sass` dependency with the API-compatible `sass` (Dart implementation) package.\\n    - This dependency change is what enables us to use Sass modules, and you should too! See [below](#sass-modules) for more information on this subject.\\n  - Replace TCW-branded packages with Forge-branded packages:\\n    - Replace `@tylertech/tyler-components-web` dependency with `@tylertech/forge`\\n    - Replace `@tylertech/tyler-components-web-angular` dependency with `@tylertech/forge-angular`\\n    - Replace `@tylertech/tyler-components-web-react` dependency with `@tylertech/forge-react`\\n    - Replace `@tyler-components-web/core` dependency with `@tylertech/forge-core`\\n    - Replace `@tyler-components-web/cli` dependency with `@tylertech/forge-cli`\\n  - Rename TCW-related code to Forge-branded naming conventions:\\n    - Rename all `<tcw-*>` HTML element names to `<forge-*>`\\n    - Rename all `tcw-*` event element names to `forge-*`\\n    - Rename all `tyl-*` CSS class names to `forge-*`\\n    - Rename all `--tyl-*` CSS custom properties to `--forge-*`\\n  - Generic core components and Tyler-specific components have been separated into two libraries.\\n    - Generic components live in `@tylertech/forge`\\n    - Tyler-specific components live in `@tylertech/forge-internal`. See [below](#step-6-public-vs-tyler-specific-components) for details.\\n    - Similar naming convention for adapter libraries, such as `@tylertech/forge-react-internal`... etc.\\n  - Review list of component and API breaking changes and apply corresponding fixes where necessary.\\n\\nThe vast majority of the changes can be handled with some good ol\' fashioned find & replace.\\n\\n</details>\\n\\n<br/>\\nLet\'s get into the details!\\n\\n:::note\\nExpand the various sections below to view the detailed list of changes. There are checkboxes next to each item to help you ensure you have evaluate\\neverything as you make progress. Some of the items themselves have more information that can be further expanded to view extra details about a specific change.\\n:::\\n\\n### Breaking changes \ud83d\udca5\\n\\nThe breaking changes listed below are separated out into high-level groupings by type. While the most common/important changes are listed in \\"Highlights\\",\\nplease remember to review the other sections to ensure you don\'t miss anything. Some of the changes listed will silently cause issues at runtime and it\'s\\nimportant that you validate whether you are using the changed features or not.\\n\\n:::tip\\nReference your application/library to see which TCW/Forge components you have defined and are using. This can help you pare down the breaking\\nchanges to only the components you know you\'re using.\\n\\nPlease let us know if you have any questions!\\n:::\\n\\n<details>\\n  <summary><b>Highlights</b></summary>\\n\\n:::note\\nMake sure to expand certain items below to view more details!\\n:::\\n\\n  <CheckboxListItem heading=\\"Busy indicator\\" description=\\"The usage expectation for this component has changed. The APIs have been adjusted, and the implementation no longer ensures a single instance of the component anymore and it will no longer handle multiple messages automatically. It is up to you to manage your instances and message updates, much like you do with the dialog component (as this is a derivative of the dialog pattern).\\">\\n    \\nThe following properties/methods have been removed:\\n\\n  - `delay`\\n  - `autoEllipsis`\\n  - `minimumVisibleLifetime`\\n  - `isDestroyed`\\n  - `addMessage()`\\n  - `removeMessage()`\\n\\nThe `hide()` method has been refactored to remove the `messageId` parameter. Busy indicators no longer support managing multiple messages, ellipsis, or auto-delay.\\nThis responsibility has been moved to developers to ensure flexibility, familiarity, and consistency with the usage of other Forge components such as the dialog.\\n\\n:::note\\nIf you need to ensure one instance of the busy-indicator is visible across multiple components but you only need to update the message or progress, you may want\\nto wrap that up into a reusable service for your application. This can allow you to essentially replicate the previous functionality by housing it in a central\\nlocation that your components can communicate with instead of interacting with the component directly.\\n:::\\n\\n  </CheckboxListItem>\\n  \\n  <CheckboxListItem heading=\\"Drawer\\" description=\\"Separated from a single component into 3 separate components for improved development experience and to ease maintainability on our end.\\">\\n\\nPreviously if you were using the drawer to toggle between the `dismissible` type and the `modal` type, you will now need to swap out the underlying components\\nthat are being used instead of adjusting the `type` property/attribute.\\n\\n**Old:**\\n\\n```html\\n<tcw-drawer></tcw-drawer> \x3c!-- \\"permanent\\" type was default --\x3e\\n<tcw-drawer type=\\"dismissible\\"></tcw-drawer>\\n<tcw-drawer type=\\"modal\\"></tcw-drawer>\\n<tcw-drawer type=\\"mini\\"></tcw-drawer>\\n<tcw-drawer type=\\"mini-hover\\"></tcw-drawer>\\n```\\n\\n**New:**\\n\\n```html\\n<forge-drawer></forge-drawer> \x3c!-- This is both \\"permanent\\" and \\"dismissible\\" now --\x3e\\n<forge-modal-drawer></forge-modal-drawer>\\n<forge-mini-drawer></forge-mini-drawer>\\n<forge-mini-drawer hover></forge-mini-drawer>\\n```\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"Card\\">\\n\\n\\n- removed all internal slots (except for the default slot) and the internal CSS grid layout. If you need to retain previous layouts, use a nested `<forge-scaffold>` for that.\\n- removed built-in `margin-bottom`.\\n- removed the `has-padding` property/attribute. Use the `--forge-card-padding` CSS custom property to control this via CSS now.\\n\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Renamed the `<tcw-datepicker>` to `<forge-date-picker>` for naming convention consistency.\\" />\\n  <CheckboxListItem heading=\\"Dialog\\" description=\\"This component used to get auto-defined for you if you were using the select, menu, time-picker, date-picker, date-range-picker. This will no longer happen, and you will need to manually define the dialog going forward if you weren\'t already. If you see any issues with dialog, please first check that you have it defined in your app.\\" />\\n  <CheckboxListItem heading=\\"Icon\\" description=\\"Renamed the `TylerIconRegistry` to just `IconRegistry`.\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed all global `tyl-list-item*` CSS classes in favor of using slots in the component (added new `title`, `subtitle`, `tertiary-title` slots).\\">\\n\\n**Old:**\\n\\n```html\\n<tcw-list-item three-line=\\"true\\">\\n  <span class=\\"tyl-list-item__title\\">List Item</span>\\n  <span class=\\"tyl-list-item__subtitle\\">Secondary Text</span>\\n  <span class=\\"tyl-list-item__tertiary-title\\">Tertiary Text</span>\\n</tcw-list-item>\\n```\\n\\n**New:**\\n\\n```html\\n<forge-list-item three-line>\\n  <span slot=\\"title\\">List Item</span>\\n  <span slot=\\"subtitle\\">Secondary Text</span>\\n  <span slot=\\"tertiary-title\\">Tertiary Text</span>\\n</forge-list-item>\\n```\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"omnibar\\">\\n\\n\\n- rename to `<forge-app-bar>` (including all sub-components). The app-launcher component has been moved to the `@tylertech/forge-internal` components package.\\n- See the [omnibar upgrade section](#omnibar-aka-app-bar) below for more detailed information about upgrading this component.\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"popup\\" description=\\"The `PopupPlacement` enum has been converted to a custom TypeScript `type`. Please see build errors and/or typings for information on what `string` values are allowed.\\" />\\n  <CheckboxListItem heading=\\"Progress spinner\\" description=\\"Replaced with a new `<forge-circular-progress>` component with more flexibility, but offers equivalent functionality.\\" />\\n  <CheckboxListItem heading=\\"Switch\\" description=\\"Refactored to remove `<input>` and `<label>` element within slotted content. Use just `<forge-switch>` element by itself with optional text content as a slotted child now.\\">\\n\\nThe semantics of the component have changed to use `<button>` with `role=\\"switch\\"` so there is no need to treat is as an `<input>` anymore.\\n\\n**Old:**\\n\\n```html\\n<tcw-switch>\\n  <input type=\\"checkbox\\" id=\\"switch\\" />\\n  <label for=\\"switch\\">off/on</label>\\n</tcw-switch>\\n```\\n\\n**New:**\\n\\n```html\\n<forge-switch>\\n  <span>off/on</span>\\n</forge-switch>\\n```\\n\\nIf you\'re using this component with Angular, you will want to ensure that you update your bindings to go on the `<forge-switch>` element now that there is no `<input>`\\nelement anymore. There is a `ControlValueAccessor` directive in the Angular adapter library `@tylertech/forge-angular` that will automatically enable the use of\\n`ngModel` and `formControl`/`formControlName` on the `<forge-switch>` element now.\\n\\n:::info\\nAdditionally, we added a new `label-position` property/attribute that you can set to `\\"start\\"` if you want the label positioned in front of the switch.\\n:::\\n\\n  </CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"Table\\" description=\\"When using the `allow-row-click` functionality along with custom cell template content, the `click` events that dispatch from within the custom cell templates will **no longer** be automatically ignored. You will need to either stop propagation manually, or use the built-in `stopCellTemplateClickPropagation` property on the column configuration.\\" />\\n  <CheckboxListItem heading=\\"Text field | Select | Chip field\\" description=\\"Updated design to use the new inset style. The notched outline style has been removed.\\">\\n\\n\\n**Old (notched-outline):**\\n\\n![Text field notched example](./images/text-field-notched.png)\\n\\n**New (inset):**\\n\\n![Text field inset example](./images/text-field-inset.png)\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"Text field | Select | Chip field\\" description=\\"The built-in top & bottom `margin` has been removed from the internal component styles. You will need to handle spacing with this component on your end now (this is how it should have been from the beginning)\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"We renamed and organized the Sass files. Please check for any references to `@tylertech/tyler-components-web/styles/theme/*` and evaluate the proper files are referenced.\\" />\\n  <CheckboxListItem heading=\\"Typography\\" description=\\"Renamed and organized the Sass files. Please check for any references to `@tylertech/tyler-components-web/styles/typography/*` and evaluate the proper files are referenced.\\" />\\n  <CheckboxListItem heading=\\"Global StyleSheets\\" description=\\"Renamed `tcw-material-design.css` to `forge.css` and `tcw-core.css` to `forge-core.css`\\" />\\n  <CheckboxListItem heading=\\"Component Delegates\\" description=\\"APIs have changed slightly. This is mostly commonly been used with the table `filterDelegate` property.\\">\\n\\n**Old:**\\n\\n```typescript\\nnew TextFieldComponentDelegate({ placeholder: \'Filter workspace\', density: \'roomy\' })\\n```\\n\\n**New:**\\n\\n```typescript\\nnew TextFieldComponentDelegate({\\n  options: { placeholder: \'Filter workspace\' },\\n  props: { density: \'roomy\' }\\n})\\n```\\n\\n:::info\\nThe configuration object has been updated to an object that has two properties `options` and `props`:\\n- `options` contains configuration for the delegate itself which may vary.\\n- `props` are properties that will be passed to the underlying Forge component\\n:::\\n\\n  </CheckboxListItem>\\n\\n</details>\\n\\n<details>\\n  <summary><b>Components</b></summary>\\n\\n  <CheckboxListItem heading=\\"Autocomplete\\" description=\\"Removed the `selectOnBlur` property. The component will now automatically select the highlighted option when the tab key is pressed while the dropdown is open, and this is no longer configurable. The first option in the dropdown will now automatically get highlighted when pressing down arrow to open the dropdown and when filtering by typing text in the `<input>`. Clicking outside of the dropdown to close it/blur the field will not select the highlighted option.\\" />\\n  <CheckboxListItem heading=\\"Autocomplete\\" description=\\"The deprecated `onBeforeValueChange` property has been removed. Use the equivalent `beforeValueChange` property instead.\\" />\\n  <CheckboxListItem heading=\\"Avatar\\" description=\\"The `autoColor` property has been changed to `false` by default, and a better default is background color (tertiary) is used for both surface and omnibar contexts.\\" />\\n  <CheckboxListItem heading=\\"Busy indicator\\" description=\\"Remove the `delay`, `autoEllipsis`, `minimumVisibleLifetime`, `isDestroyed` properties, as well as the `addMessage()` and `removeMessage()` methods. Also, refactored the `hide()` method to remove the `messageId` parameter. Busy indicators no longer support managing multiple messages, ellipsis, or auto-delay. This responsibility has been moved to developers to ensure flexibility, familiarity, and consistency with the usage of other Forge components such as the dialog.\\" />\\n  <CheckboxListItem heading=\\"Button toggle group\\" description=\\"When listening for the `forge-button-toggle-select` (emitted from the `<forge-button-toggle>` toggle element) event on the `<forge-button-toggle-group>` (group) element, this event has been renamed to `forge-button-toggle-group-change` to avoid confusion. If you desire to continue to use the `forge-button-toggle-select` event on the group, the `detail` property will contain an object of type `IButtonToggleSelectEventData` from the toggle that emitted it (not the current value of the group as a whole any longer). Use the type `CustomEvent<IButtonToggleGroupChangeEventData>` for the `forge-button-toggle-group-change` event now.\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"This component has been rewritten from the ground up. Many APIs have changed. See below for detailed information, but refer to the component docs for new usage information.\\">\\n\\n\\n- Renamed events to use element name in prefix (`tcw-calendar-*` instead of `tcw-*`)\\n- Renamed the `ICalendarDateSelectEvent` interface to `ICalendarDateSelectEventData`\\n- The `tcw-date-range-select` event has been removed and its functionality included in the `tcw-calendar-date-select` event, which now has `range` and `rangeSelectionState` properties\\n- Renamed the `tcw-active-change` event to `tcw-calendar-focus-change`\\n- The `mode` property is now used to set the date selection behavior\\n- The `multiselect` property is replaced by setting the `mode` property to `\'multiple\'`\\n- The `range` property is replaced by setting the `mode` property to `\'range\'`\\n- The \\"display\\" `mode` property setting is replaced by a new `readonly` property\\n- Renamed the `viewIndex` property to `view`\\n- Renamed the `blockedDates` property to `disabledDates`\\n- Renamed the `minDate` and `maxDate` properties to `min` and `max`\\n- The `minYear` and `maxYear` properties are replaced by a single `yearRange` property which only affects the year picker\\n- The `viewIndex` property has been removed\\n- The `autoSwitch` property has been removed, the `goToDate()` method can be used to move any date into view\\n- Renamed `renderDateCallback` to `dateBuilder`, which now must return an `HTMLElement`\\n- Renamed `disabledDayCallback` to `disabledDateBuilder`\\n- Renamed `eventsCallback` to `eventBuilder`\\n- Renamed the `removeDate()` method to `deselectDate()`\\n- The `handleKey()` method now accepts a `KeyboardEvent` as an argument\\n- Selecting a month or year from the picker no longer updates the selected date to match by default, the new `selectionFollowsMonth` property enables this\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"Card\\" description=\\"Refactor to remove internal grid layout, `header`, and `footer` slots. Will just act as a single slot going forward (use a nested `<forge-scaffold>` if structure is desired).\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"Removed built-in `margin-bottom` style on the host element\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"`outlined` attribute value is based on existence rather than coercing boolean value from string\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"The `masked` property is now `true` by default\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Removed the `startView` property\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Renamed the `blockedDates` property to `disabledDates`\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"Refactored to use a base class abstraction (internal-only, but noted in case of importing the foundation/adapter in your own library)\\" />\\n  <CheckboxListItem heading=\\"Date picker\\" description=\\"The deprecated `useCharMask` property attribute has been removed.\\" />\\n  <CheckboxListItem heading=\\"DatepickerComponentDelegate\\" description=\\"Renamed to `DatePickerComponentDelegate` (upper-case \'P\' in \'picker\'), as well as adjusted the `onChange()` listener to return the value as a `Date` object instead of the `<input>` value string.\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"Removed the `startView` property\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"Refactored to use a base class abstraction (internal-only, but noted in case of importing the foundation/adapter in your own library)\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"The `masked` property is now `true` by default\\" />\\n  <CheckboxListItem heading=\\"Date range picker\\" description=\\"The deprecated `useCharMask` property attribute has been removed.\\" />\\n  <CheckboxListItem heading=\\"DateRangePickerComponentDelegate\\" description=\\"Updated component delegate to use range picker instead of two separate date pickers. The public API has changed on this delegate.\\" />\\n  <CheckboxListItem heading=\\"DateRangePickerComponentDelegate\\" description=\\"Adjusted the `onChange()` listener to return the value as a `Date` object instead of the `<input>` value string.\\" />\\n  <CheckboxListItem heading=\\"Drawer\\" description=\\"Created separate components per-type (drawer, modal, mini) instead of a single component that handles all types.\\">\\n\\n\\n- `<forge-drawer>`: this is essentially a combination of the old \\"permanent\\" and \\"dismissible\\" types\\n- `<forge-mini-drawer>`: this is a combo of the old \\"mini\\" and \\"mini-hover\\" types\\n- `<forge-modal-drawer>`: this is just the \\"modal\\" type on its own\\n\\n\\n  </CheckboxListItem>\\n  <CheckboxListItem heading=\\"Drawer\\" description=\\"The `tcw-drawer-close` event has been renamed to `forge-modal-drawer-close` since it only pertains to the `<forge-modal-drawer>` variant.\\" />\\n  <CheckboxListItem heading=\\"Expansion panel\\" description=\\"Removed the `tcw-expansion-panel-open` and `tcw-expansion-panel-close` events and replaced with `forge-expansion-panel-toggle` which returns a boolean of whether the expansion panel is open or closed.\\" />\\n  <CheckboxListItem heading=\\"File picker\\" description=\\"Remove the `value` property as it was unused. Use the change event to retrieve and store the selected files.\\" />\\n  <CheckboxListItem heading=\\"Icon button\\" description=\\"`dense` attribute value is based on existence rather than coercing boolean value from string\\" />\\n  <CheckboxListItem heading=\\"Icon button\\" description=\\"Renamed the `change` event to `forge-icon-button-change`\\" />\\n  <CheckboxListItem heading=\\"List dropdown\\" description=\\"Removed built-in dialog functionality where the dropdown would render in a dialog on mobile devices automatically. The expectation going forward is that native platform components/pickers will be used on mobile where necessary. This change also means all APIs related to this functionality, such as the common `dialogWidthThreshold` property on various components that utilize the list-dropdown internally will have removed this property.\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed all global `tyl-list-item*` CSS classes in favor of using slots in the component (added new `title`, `subtitle`, `tertiary-title` slots).\\">\\n\\n**Old:**\\n\\n```html\\n<tcw-list-item three-line=\\"true\\">\\n  <span class=\\"tyl-list-item__title\\">List Item</span>\\n  <span class=\\"tyl-list-item__subtitle\\">Secondary Text</span>\\n  <span class=\\"tyl-list-item__tertiary-title\\">Tertiary Text</span>\\n</tcw-list-item>\\n```\\n\\n**New:**\\n\\n```html\\n<forge-list-item three-line>\\n  <span slot=\\"title\\">List Item</span>\\n  <span slot=\\"subtitle\\">Secondary Text</span>\\n  <span slot=\\"tertiary-title\\">Tertiary Text</span>\\n</forge-list-item>\\n```\\n\\n</CheckboxListItem>\\n\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed the `no-wrap` attribute in favor of using the `wrap` attribute only.\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Renamed the `IListItemSelectedEventData` interface to `IListItemSelectEventData`\\" />\\n  <CheckboxListItem heading=\\"List item\\" description=\\"Removed `!important` on `leading`, `trailing`, and `avatar` slotted styles to allow for overriding. This comes with the caveat that it won\'t properly style any elements that are placed in these slots that have a `font-size` style applied that doesn\'t match the guidance. If you use font-based icons with the `tyler-icons` class where there is a `font-size` style applied, you may need to set a proper `font-size` manually OR switch to using the `<forge-icon>` component which inherits the `font-size` properly.\\" />\\n  <CheckboxListItem heading=\\"Omnibar\\" description=\\"Renamed the `tcw-omnibar-search-search` event to `forge-app-bar-search-input`\\" />\\n  <CheckboxListItem heading=\\"Omnibar search\\" description=\\"Removed the deprecated built-in `light-green`, `teal`, `blue`, `orange`, `red`, `blue-grey` themes. Only default and `white`themes are supported by default now.\\" />\\n  <CheckboxListItem heading=\\"Paginator\\" description=\\"Renamed the `change` event to `forge-paginator-change`\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"The deprecated `IPosition` interface has been removed in favor of using the `IPopupPosition` interface.\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"For all components that utilize the `<forge-popup>`: renamed `popupPositionAdjustment` and `positionAdjustment` properties to `popupOffset` and `offset` respectively.\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"Converted `PopupPlacement` enum to a standard custom type, as well as changed the `*-left` and `*-right` values to use logical alignment `*-start` and `*-end` (ex. `\'bottom-start\'` instead of `\'bottom-left\'` and `\'bottom-end\'` instead of `\'bottom-right\'`).\\" />\\n  <CheckboxListItem heading=\\"Progress spinner\\" description=\\"Removed and replaced with new `circular-progress` component. Note: the `progress` property on `circular-progress` changed to accept values from 0 to 1 instead of 0 to 100.\\" />\\n  <CheckboxListItem heading=\\"Scaffold\\" description=\\"The internal container now uses a `position: relative` style by default to better support content within the slots, but can be overridden via the `--forge-scaffold-body-position` CSS custom property if desired.\\" />\\n  <CheckboxListItem heading=\\"Scaffold\\" description=\\"`overflow` on the internal scaffold container element has been set to `hidden` by default, but can be overridden via the `\u2014-forge-scaffold-overflow` CSS custom property\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Removed the `selectOnBlur` property. The component will now automatically select the highlighted option when the tab key is pressed while the dropdown is open, and this is no longer configurable. The first option in the dropdown will now automatically get highlighted when pressing down arrow to open the dropdown. Clicking outside of the dropdown to close it/blur the field will not select the highlighted option.\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Removed the \'notched outline\' variant in favor for the \'inset\' design\\" />\\n  <CheckboxListItem heading=\\"Slider\\" description=\\"UI design has changed, as well as public API adjustments to account for new features. See Storybook docs for usage information.\\" />\\n  <CheckboxListItem heading=\\"Switch\\" description=\\"Refactored to remove `<input>` and `<label>` element within slotted content. Use just `<tcw-switch>` element by itself with optional text content as a slotted child now.\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Removed the \'notched outline\' variant in favor for the \'inset\' design\\" />\\n  <CheckboxListItem heading=\\"Tab bar\\" description=\\"Removed `focusOnActivate` property and adjusted default functionality to **not** automatically set focus to child toggles when activated via code.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Renamed the `ITableSortedEventData` interface to `ITableSortEventData`\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Renamed the `ITableSortedMultipleEventData` interface to `ITableSortMultipleEventData`\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"When using the `allow-row-click` functionality along with custom cell template content, the `click` events that dispatch from within the custom cell templates will **no longer** be automatically ignored. You will need to either stop propagation manually, or use the built-in `stopCellTemplateClickPropagation` property on the column configuration.\\" />\\n  <CheckboxListItem heading=\\"Time picker\\" description=\\"The deprecated `useCharMask` property attribute has been removed.\\" />\\n  <CheckboxListItem heading=\\"Toast\\" description=\\"Converted `placement` property to `ToastPlacement` type, as well as changed the `*-left` and `*-right` values to use logical alignment `*-start` and `*-end` (ex. `\'bottom-start\'` instead of `\'bottom-left\'`).\\" />\\n  <CheckboxListItem heading=\\"All component delegates\\" description=\\"All existing component delegate classes have been refactored to use new APIs. The biggest change here is that the configuration object provided to the constructor now contains a uniform generic API for separating properties related to component API vs supplemental component options.\\">\\n\\n\\n- The `getValue()` and `setValue()` methods have been converted to a `value` property getter/setter.\\n- The `setDisabled()` and `setValidity()` methods have been converted to `disabled` and `invalid` getter/setter properties respectively.\\n- The `validate()` method has been removed.\\n\\n\\n  </CheckboxListItem>\\n\\n</details>\\n\\n<details>\\n  <summary><b>CSS Custom Properties</b></summary>\\n\\n:::note\\nAll component-specific theme CSS custom properties (any properties related to color) have been renamed using the following convention: `--forge-<component name>-theme-<style name>`.\\n:::\\n\\n  <CheckboxListItem heading=\\"Tyler-specific theme CSS custom properties\\" description=\\"Separated from MDC and renamed. MDC variables will use `--mdc-*` prefixes and Tyler (formerly `--tyl-*`) variables will use `--forge-*` prefixes.\\" />\\n  <CheckboxListItem heading=\\"Avatar\\" description=\\"Renamed `--tyl-avatar-background-color` CSS custom property to `--forge-avatar-theme-background` and `--tyl-avatar-foreground-color` to `--forge-avatar-theme-on-background`\\" />\\n  <CheckboxListItem heading=\\"Backdrop\\" description=\\"Removed usage of `--mdc-theme-text-secondary-on-light` variable for `background-color` and now using `--forge-backdrop-theme-background` instead.\\" />\\n  <CheckboxListItem heading=\\"Badge\\" description=\\"Replaced `$themes` Sass variable (including individual theme map variables) with single `$theme-values` map variable.\\" />\\n  <CheckboxListItem heading=\\"Banner\\" description=\\"Replaced `$themes` Sass variable (including individual theme map variables) with single `$theme-values` map variable.\\" />\\n  <CheckboxListItem heading=\\"Banner\\" description=\\"Renamed `--tyl-banner-background-color` to `--forge-banner-theme-background`, `--tyl-banner-color` to `--forge-banner-theme-on-background`, and `--tyl-banner-icon-color` to `--forge-banner-theme-icon`\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"Renamed all `--tyl-calendar-event-*` CSS custom properties to use the following naming convention: `--forge-calendar-theme-event-*`.\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"Using `text-disabled-on-light` variable instead of `text-hint-on-background` for disabled theme\\" />\\n  <CheckboxListItem heading=\\"Calendar\\" description=\\"Removed the `--tyl-calendar-width` and `--tyl-calendar-cell-size` custom properties - the calendar can now be assigned a width in CSS and responsively resizes\\" />\\n  <CheckboxListItem heading=\\"Footer\\" description=\\"Renamed `--tyl-footer-background-color` to `--forge-footer-theme-background` and `--tyl-footer-color` to `--forge-footer-theme-on-background`.\\" />\\n  <CheckboxListItem heading=\\"Icon\\" description=\\"Renamed `--tyl-icon-color` to `--forge-icon-theme-color`\\" />\\n  <CheckboxListItem heading=\\"Inline message\\" description=\\"Replaced `$themes` Sass variable (including individual theme map variables) with single `$theme-values` map variable.\\" />\\n  <CheckboxListItem heading=\\"Inline message\\" description=\\"Renamed `--tyl-inline-message-background-color` to `--forge-inline-message-theme-background`, `--tyl-inline-message-color` to `--forge-inline-message-theme-on-background`, and `--tyl-inline-message-icon-color` to `--forge-inline-message-theme-icon`\\" />\\n  <CheckboxListItem heading=\\"Linear progress\\" description=\\"Renamed `--tyl-linear-progress-buffer-color` to `--forge-linear-progress-theme-buffer` and `--tyl-linear-progress-buffer-dots-filter` to `--forge-linear-progress-theme-buffer-dots`.\\" />\\n  <CheckboxListItem heading=\\"Omnibar\\" description=\\"Removed `on-primary` theme color in favor of `--forge-app-bar-theme-on-background` custom property. Renamed `--tyl-omnibar-background-color` custom property to `--forge-app-bar-theme-background`\\" />\\n  <CheckboxListItem heading=\\"Omnibar search\\" description=\\"Renamed `--tyl-omnibar-search-background-color-hover` to `--forge-app-bar-search-theme-background-focused`, `--tyl-omnibar-search-disabled-opacity` to `--forge-app-bar-search-theme-disabled-opacity`, and `--tyl-omnibar-search-background-color` to `--forge-app-bar-search-theme-background`.\\" />\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"Replace `surface` theme with `elevated-surface`.\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Renamed `--tyl-select-background-color` to `--forge-select-theme-background`.\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Replace `text-hint-on-background` with `label-disabled-on-background` for disabled label color\\" />\\n  <CheckboxListItem heading=\\"Select\\" description=\\"Replace `--mdc-theme-form-field-invalid-on-background` with `--forge-select-theme-background` for invalid background color\\" />\\n  <CheckboxListItem heading=\\"Skeleton\\" description=\\"Renamed `--tyl-skeleton-background-color` to `--forge-skeleton-theme-background`, `--tyl-skeleton-animation-color` to `--forge-skeleton-theme-gradient`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `enabled-hover-background` with `row-hover-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `enabled-active-hover-background` with `row-active-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `selected-background` with `row-selected-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `selected-hover-background` with `row-selected-hover-background`.\\" />\\n  <CheckboxListItem heading=\\"Table\\" description=\\"Replace `selected-active-hover-background` with `row-selected-active-background`.\\" />\\n  <CheckboxListItem heading=\\"Toast\\" description=\\"Removed `text-primary-on-elevated-surface` and `on-elevated-surface` theme to use `--forge-toast-theme-on-background` instead.\\" />\\n  <CheckboxListItem heading=\\"Toast\\" description=\\"Remove `elevated-surface` theme to use `--forge-toast-theme-background` instead.\\" />\\n  <CheckboxListItem heading=\\"Tooltip\\" description=\\"Renamed `--tyl-tooltip-background-color` to `--forge-tooltip-theme-background`, `--tyl-tooltip-color` to `--forge-tooltip-theme-on-background`.\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Renamed `--tyl-text-field-background-color` to `--forge-text-field-theme-background`.\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Replace `text-hint-on-background` with `label-disabled-on-background` for disabled label color\\" />\\n  <CheckboxListItem heading=\\"Text field\\" description=\\"Replace `--mdc-theme-form-field-invalid-on-background` with `--forge-text-field-theme-background` for invalid background color\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"Replace `--mdc-theme-error-hover` with `--forge-theme-error-hover`\\" />\\n\\n</details>\\n\\n---\\n\\n## How to upgrade?\\n\\nThe upgrade process can be broken down into several well-defined steps.\\n\\n:::note\\nPlease note that in [step 2](#step-2-find--replace-automated) we have created an automated upgrade utility that you can use on your projects to do most of the heavy lifting!\\n:::\\n\\n### Step 1: dependencies\\n\\nThe first thing we want to take care of is to fix our dependencies. This will immediately break a lot of things in our app.\\n\\nBelow is a mapping table of old vs new package names. Your application(s) will not make use of all of these, but please\\nevaluate and replace the dependencies within your `package.json` (where applicable) with the corresponding equivalent\\npackage noted in the \\"New Package Name\\" column.\\n\\n| Old Package Name                            | New Package Name\\n| ------------------------------------------- | ------------------\\n| `@tylertech/tyler-components-web`           | `@tylertech/forge`\\n| `@tylertech/tyler-components-web-angular`   | `@tylertech/forge-angular`\\n| `@tylertech/tyler-components-web-react`     | `@tylertech/forge-react`\\n| `@tyler-components-web/core`                | `@tylertech/forge-core`\\n| `@tyler-components-web/cli`                 | `@tylertech/forge-cli`\\n| `@tylertech/build-tools`                    | `@tylertech/forge-build-tools`\\n| `@tyler-components-web/testing`             | `@tylertech/forge-testing`\\n| `node-sass`                                 | `sass`\\n\\n<br/>\\n\\nNext if you have the `@tylertech/tyler-icons` package installed, make sure it is at least version `^1.12.0`. We will need this version of\\nthe package to access a new icon that will be used in the app-bar later on. If you don\'t have it explicitly installed then you can ignore\\nthis because this version is already installed as a dependency of `@tylertech/forge` with the correct minimum version for you.\\n\\n:::info\\nIt\'s worth noting that all of the new Forge-branded packages will be starting at version 2.0 to keep consistent with being an\\nevolution of the TCW library, we\'re just using new packages for better organization per the branding requirements.\\n:::\\n\\n### Step 2: find & replace (automated)\\n\\nThis step is the core of the upgrade process. We need to fix TCW references to the use the new Forge naming convention, and\\nupgrade any renamed APIs that we can without manually assessing each usage (we\'ll save that step for the end).\\n\\nYou\'re in luck! This process has been taken care of for you, if you choose to use it that is. We have gone ahead and created a utility\\nthat you can run on your project(s), and it will handle as many of the updates as it can. There are still some manual adjustments\\nthat you will need to evaluate after this utility is run, but it should get you _most_ of the way there.\\n\\n<details>\\n  <summary>View instructions</summary>\\n\\n:::info Important\\nBefore continuing with the automated utility, please ensure that you have source control configured or a backup created\\nas this is a one-way street...\\n:::\\n\\n  Please run the following to install the utility globally on your machine:\\n\\n  ```bash\\n  npm install -g @tylertech/forge-upgrade --registry https://tylertech.jfrog.io/tylertech/api/npm/npm/\\n  ```\\n\\n:::info\\nIf you receive an error during installation, it is likely due to you not having a global `.npmrc` file on set up on your system\\nOR you\'re not logged in to the registry from the command line.\\n\\nto fix this, either configure an `.npmrc` in your user-level directory on your system, or log in to the registry with\\nnpm login --registry https://tylertech.jfrog.io/tylertech/api/npm/npm/` using your Artifactory credentials.\\n:::\\n\\n  The `forge-upgrade` utility will take `--path` as an argument and find all files in your project and attempt to replace the usages with the new APIs.\\n\\n  ```bash\\n  forge-upgrade --path <relative/path/to/source/directory>\\n  ```\\n\\n  The utility will accept the following arguments:\\n\\n  - `--path <path>` **(required)**\\n    - Accepts a relative path from the current directory to the source directory where the upgrade should begin from.\\n  - `--dry-run` (optional, recommend on initial execution)\\n    - Runs the utility without modifying any files and prints out what it would do if ran without this flag.\\n  - `--ignore` (optional)\\n    - Paths or globs of files to ignore. (ex. `--ignore \\"**/*/my-directory/**/*\\"`).\\n    - Note: separate multiple values with a comma.\\n\\n  :::info Important\\n  It is recommended that you run the utility initially with the `--dry-run` argument to evaluate which files will be adjusted to get an idea\\n  about whether the `--ignore` argument should be used.\\n  \\n  The utility will automatically ignore `node_modules` directories.\\n  :::\\n\\n  To get a better idea of what it is doing, or if you need to manually upgrade, see below.\\n\\n  For example, element names are changing:\\n\\n  ```html\\n  <tcw-avatar>\\n\\n  // Now becomes\\n\\n  <forge-avatar>\\n  ```\\n\\n  and CSS custom properties and classes follow suit as well:\\n\\n  ```html\\n  <body class=\\"tyl-typography\\" style=\\"--mdc-theme-tertiary: red;\\">\\n\\n  // Now becomes\\n\\n  <body class=\\"forge-typography\\" style=\\"--forge-theme-tertiary: red;\\">\\n  ```\\n\\n:::info\\nAll MDC-related CSS custom properties have been left unchanged (for now). In a future update, we will be\\nabstracting those items and renaming them as well!\\n:::\\n\\n  Finally, wherever we can, various interfaces, APIs, component names... etc. will be updated as well. There are many changes\\n  that cannot be made automatically on your behalf, and those will be up to you to assess and upgrade manually. Please see the next step to \\n  start that process.\\n\\n  To view an exhaustive list of replacements, see the upgrade utility source code [here](https://github.com/tyler-technologies/forge-upgrade/blob/main/configurations/forge-2.0.json).\\n\\n</details>\\n\\n### Step 3: manual evaluation\\n\\nAs noted above, the automated utility cannot handle everything without making assumptions on your behalf. This is where you must read the\\nbreaking change details and determine if they affect your application or library. We wanted to make sure to note every possible change\\nthat could affect your application, but we expect that most applications will only require updates to a subset of the following.\\n\\n[View breaking changes](#breaking-changes-)\\n\\n:::info\\nThe breaking changes list includes changes that the automated utility handles, but please validate that the changes were made successfully\\nand accurately during your evaluation.\\n:::\\n\\n### Step 4: build and test application/library\\n\\nNow is the time to cross your fingers and attempt to build and run your application. At this point you probably feel as if you just completely broke everything, but\\nI can assure you that you are very close! Any build errors you get at this point will either be things the automated utility couldn\'t handle for you, or that you\\ndidn\'t realize you were using from the list of breaking changes above.\\n\\n:::info Important\\nIf you come across any problems that are not noted in the breaking changes list, please let us know ASAP so we can help you get it fixed and update\\nthis guide for others that may also come across it.\\n:::\\n\\nOnce you get your application building and running locally, it\'s time to manually validate everything by testing it out from a user\'s perspective. Navigate around your\\napp and look for any inconsistencies, broken features, or anything that may be out of place. Expand the section below for common visual inconsistencies you may run into:\\n\\n<details>\\n  <summary>View features</summary>\\n\\n  <CheckboxListItem heading=\\"Form fields\\" description=\\"You will likely notice a difference in spacing between your form fields (text-field, select, autocomplete, date-picker, ...etc.). This is due to the internal top/bottom `margin` being removed on the text-field and select components (supporting the older notched outline style). It is expected that you will update your layouts to add your own `margin`, or even better use the `gap` property with flex/grid layouts!\\" />\\n  <CheckboxListItem heading=\\"Circular progress\\" description=\\"The new circular-progress component (replacing the old progress-spinner) removes `stroke-width` and `diameter` attributes in favor of CSS custom properties. See component docs for details.\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"The `<forge-card>` no longer has any default `margin-bottom`. This is intended to be left up to application developers.\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"The `<forge-card>` no longer has an internal grid layout with header and footer slots. Use an internal `<forge-scaffold>` if you need to retain those layouts.\\" />\\n  <CheckboxListItem heading=\\"Card\\" description=\\"The `<forge-card>` no longer has a `has-padding` property/attribute. Use the `--forge-card-padding` CSS custom property to control that now from CSS.\\" />\\n\\n</details>\\n\\n### Step 5: evaluate new features\\n\\nSince we\'ve made it this far, we might as well introduce the good part. While we were introducing breaking changes across the library, we also took that time\\nlook at the feedback we\'ve received about various components and introduce some new features! Please review the list of new features below!\\n\\n<details>\\n  <summary>View features</summary>\\n\\n  <CheckboxListItem heading=\\"Popup\\" description=\\"All popup positioning logic has been rewritten and improved to fix many of the outstanding bugs related to these elements not being positioned correctly.\\" />\\n  <CheckboxListItem heading=\\"Scaffold\\" description=\\"Added new `left` and `right` slots that allow for full-height content to be placed next to all other content within the scaffold.\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"Fixed various theming issues across the library in regards to the wrong variables being used, and incompatibility with our built-in dark theme.\\" />\\n  <CheckboxListItem heading=\\"Theme\\" description=\\"Scrollbar styles have been adjusted to be less intrusive, but offer CSS custom properties for customization.\\" />\\n  <CheckboxListItem heading=\\"Slider\\" description=\\"Added new \'range\' functionality for specifying a start and end value in the same slider.\\" />\\n  <CheckboxListItem heading=\\"Component delegates\\" description=\\"Component delegate classes have been created for most interactive components across the library. This helps encapsulate the DOM creation and configuration process for a more streamlined development experience when instantiating new component instances imperatively.\\" />\\n\\n</details>\\n\\n### Step 6: public vs Tyler-specific components\\n\\nAs noted earlier, part of the Forge 2.0 process is to release the core/generic components to the open source community. While _most_ components are already \\ngeneric enough, there are a few components that are still specific to Tyler, and we need to keep those internal and distribute them within a different package.\\nThis will also provide us a library to share more domain specific components as we need them in the future!\\n\\n:::info\\nWe converted the omnibar component to app-bar to make it generic enough for public consumption.\\n:::\\n\\nThe Forge 2.0 internal components can be installed via the `@tylertech/forge-internal` package, and is used exactly the same way the standard Forge components are.\\n\\nThe following are the only components available in the internal package (as of May 2022):\\n\\n- `<forge-app-launcher-button>`\\n- `<forge-footer>`\\n- `<forge-landing-page-layout>`\\n\\n:::info\\nFor those of you that are using React, we also created a corresponding `@tylertech/forge-react-internal` package that you can install to access the\\nReact wrapper components for these internal components.\\n\\nThere is no need for an Angular adapter library for the internal components at this time!\\n:::\\n\\n---\\n\\n## Sass modules\\n\\nThe conversion from the Sass `@import` statement to Sass modules (`@use`) is fairly straightforward, but does introduce a shift in how CSS is generated, as well as how Sass mixins,\\nvariables, functions... etc. are shared across files. While not required, it is highly recommended that you update your own Sass files to use the new syntax.\\n\\nHere are some details that you may find helpful during this process:\\n\\n<details>\\n  <summary><b>Automated</b></summary>\\n\\n  The Sass team provides an migrator utility that can be used to automate the conversion of your Sass files to the latest and greatest features of the language (including the\\n  conversion to Sass modules). You can find information about the migrator utility [here](https://sass-lang.com/documentation/cli/migrator).\\n\\n</details>\\n\\n<details>\\n  <summary><b>Manual</b></summary>\\n\\n  If you prefer to migrate your code manually, you can find more information about the new `@use` syntax [here](https://sass-lang.com/documentation/at-rules/use). This guide will\\n  walk you through what a module is, and how to convert from the `@import` syntax.\\n\\n</details>\\n\\n:::info\\nThere is another great article regarding Sass modules on CSS-Tricks [here](https://css-tricks.com/introducing-sass-modules/) that you may find helpful.\\n:::\\n\\nPlease reach out to the Forge team if you need assistance!\\n\\n---\\n\\n## Omnibar (aka App bar)\\n\\nAs you\'ve likely seen by now, the `<tcw-omnibar>` has been renamed to `<forge-app-bar>` (including all related sub-components). Before moving on I wanted to draw attention to this change, as \\nsome of the `slot` names have changed, and the default logo has been removed.\\n\\nIf you used the automated utility to upgrade, then the naming of the element(s) _should_ have been updated for you. You will still want to evaluate your usage of the `slot` names though.\\nExpand the example below to see how the app-bar is expected to be used now:\\n\\n<details>\\n  <summary>View example</summary>\\n\\n  The slot names have been renamed to be more logical, rather than named after the content they were intended to hold.\\n\\n  - `menu` slot renamed to `start`\\n  - `user-action` slot **removed**. Use `end` slot.\\n  - `action` slot **removed**. Use `end` slot.\\n  - `profile` slot renamed to `end`\\n\\n  Additionally, the default Tyler logo that was built-in to the omnibar before has been removed. It\'s expected that each application will render this icon manually now\\n  in the `logo` slot.\\n\\n  ```html expanded\\n  <forge-app-bar id=\\"forge-app-bar-example\\" title-text=\\"App bar\\">\\n    \x3c!-- \\"start\\" slot --\x3e\\n    <forge-app-bar-menu-button slot=\\"start\\"></forge-app-bar-menu-button>\\n\\n    \x3c!-- \\"logo\\" slot --\x3e\\n    <forge-icon slot=\\"logo\\" name=\\"tyler_talking_t_logo\\"></forge-icon>\\n\\n    \x3c!-- \\"center\\" slot --\x3e\\n    <forge-app-bar-search id=\\"app-bar-search\\" slot=\\"center\\"></forge-app-bar-search>\\n\\n    \x3c!-- \\"end\\" slot --\x3e\\n    <forge-app-bar-help-button slot=\\"end\\"></forge-app-bar-help-button>\\n    <forge-app-bar-notification-button slot=\\"end\\"></forge-app-bar-notification-button>\\n    <forge-app-launcher-button slot=\\"end\\"></forge-app-launcher-button>\\n    <forge-app-bar-profile-button slot=\\"end\\"></forge-app-bar-profile-button>\\n  </forge-app-bar>\\n  ```\\n\\n:::info\\nWhen setting up the icon for the logo. We have added the same Tyler Talking T logo that was built-in before to the `@tylertech/tyler-icons` package. You will\\nneed at least version `1.12.0` of this package to have access to that icon. The only other requirement on top of the snippet above is to ensure you define\\nthe icon within the `IconRegistry`. Note: This version is set as a dependency of `@tylertech/forge` package for you.\\n:::\\n\\n</details>\\n\\n---\\n\\n## VS Code Extension\\n\\nFor those of you that have been using the TCW Snippet extension for VS Code, you\'ll be happy to know that we have also created a new version of the extension for \\nthe Forge 2.0 components!\\n\\nTo install the new extension, please click [here](/assets/cdn/files).\\n\\n---\\n\\n## Open source\\n\\nAs we continue to prepare repositories and packages for release to the open source community, we will eventually be exposing them to the public. This means that\\nthe npm packages will soon be published to the public [npm](https://npmjs.com) registry. We\'ll post another announcement when that time comes because it will require\\nthat you reinstall the packages in your application(s) to ensure that the `package-lock.json` and SHA hashes are updated properly to point to the new packages.\\n\\nThe packages will still be installed through Artifactory, but we\'ll need to purge the previously installed versions and re-cache them in JFrog as they will be coming\\nthrough the public npm registry as if it was any other third-party package.\\n\\nThis process _should_ be seamless, but we wanted to give you a heads up that it will be coming at some point soon.\\n\\n---\\n\\n## What\'s next for Forge components?\\n\\nTCW has been a successful project for many years internally within Tyler. We are happy to announce that we are sharing Forge (previously TCW) with the public open source community!\\nThis is exciting as it will help Forge improve via external contributions, and allow Tyler to give back to the open source community.\\n\\n<details>\\n  <summary><b>Long term goals</b></summary>\\n\\n\\n  - Abstract MDC-related code, styles, classes, and custom properties into a Forge-owned style abstraction library with its own Forge-specific naming conventions.\\n    - We want to more easily allow for swapping out internals and not rely so heavily on MDC and utilize it more like a hidden dependency.\\n  - Refactor the component architecture to more easily allow for functionally extending components via JavaScript with desired features or overriding existing functionality.\\n    - We want to allow for component library authors to build their own components on top of Forge more easily as a library itself with customized functionality.\\n  - Allow for more easily theming the library to match any design system.\\n    - This is already underway, and will be part of the style abstraction layer mentioned in the first bullet, but this is a separate goal in itself as part of that larger undertaking.\\n  - Continue to build new components as they are needed.\\n  - Continue to improve the underlying build pipeline to take advantage of modern tools that increase performance.\\n  - Update dynamic elements to use stay static in the layout instead of being constructed on-the-fly. This will greatly improve developer usage and experience.\\n\\n\\n</details>\\n\\n---\\n\\n## Upgrade complete \ud83d\ude80\\n\\nThis upgrade has been in the works for a long time, and we\'re very happy to finally release it! We hope you like the changes, and hopefully the upgrade process went as smoothly\\nas it could given all of the breaking changes. This _should_ set us up very nicely for the future to avoid having to make such a large change as we continue to maintain Forge.\\n\\n### Important links\\n\\nBelow are some important links that you will want to make note of:\\n\\n- [Forge 2.0 repository](https://github.com/tyler-technologies/forge)\\n- [Forge 2.0 Storybook documentation](https://forge.tylerdev.io/)\\n- [Forge 2.0 internal repository](https://github.com/tyler-technologies/forge-internal/)\\n- [Forge 2.0 Core repository](https://github.com/tyler-technologies/forge-core/)\\n- [Forge 2.0 Angular adapter repository](https://github.com/tyler-technologies/forge-angular/)\\n- [Forge 2.0 React adapter repository](https://github.com/tyler-technologies/forge-react/)\\n- [Forge 2.0 internal React adapter repository](https://github.com/tyler-technologies/forge-react-internal/)\\n- [TCW v1.x repository](https://github.com/tyler-technologies/tyler-components-web)\\n- [TCW v1.x Storybook documentation](https://tyler-technologies.github.io/tyler-components-web/)\\n\\nPlease let us know if you have any questions, concerns, or if you run into any issues at all and we\'ll be glad to help \ud83c\udf7b"},{"id":"/2020/05/06/package-dependencies","metadata":{"permalink":"/blog/2020/05/06/package-dependencies","editUrl":"https://pr.new/github.com/tyler-technologies-oss/forge-design-system/edit/main/blog/2020-05-06-package-dependencies/index.md","source":"@site/blog/2020-05-06-package-dependencies/index.md","title":"Forge and package dependencies","description":"In order to optimize Forge use, teams should avoid creating libraries from Forge components and should ensure that the components are kept up to date.","date":"2020-05-06T00:00:00.000Z","formattedDate":"May 6, 2020","tags":[{"label":"tcw","permalink":"/blog/tags/tcw"},{"label":"forge","permalink":"/blog/tags/forge"},{"label":"components","permalink":"/blog/tags/components"},{"label":"npm","permalink":"/blog/tags/npm"}],"readingTime":4.055,"hasTruncateMarker":true,"authors":[{"name":"Ross Blakeney","title":"Lead Software Engineer","url":"https://github.com/Ross-Blakeney","imageURL":"https://github.com/Ross-Blakeney.png","key":"ross.blakeney"}],"frontMatter":{"tags":["tcw","forge","components","npm"],"authors":["ross.blakeney"]},"prevItem":{"title":"Forge 2.0 Upgrade","permalink":"/blog/2022/05/02/upgrade-guide-forge-2"}},"content":"In order to optimize Forge use, teams should avoid creating libraries from Forge components and should ensure that the components are kept up to date. \\n\\n:::info TL;DR\\n* Never set Forge as a dependency of a package. Set Forge as a peer dependency only.\\n* Always keep Forge within the same major version in all your apps and packages.\\n\\nIt\'s worth noting that this concept applies to **any** package that you want as a dependency of your library, but you want to allow for the consumer/dependent to control the version for compatibility with multiple versions of the library in question.\\n:::\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## Overview\\n\\n**Never list Forge in the `dependencies` array for your own library package. Use `peerDependencies` instead.**\\n\\nThere are a few key points we need to review.\\n\\n### NPM jargon\\n\\n- Package - any npm package. Typically, a library.\\n- Dependency - an external package that will be *copied into your package* at the version you specify in the `package.json`.\\n- Peer dependency - an external package that must be *provided by the dependent*.\\n  - A peer dependency is *not* copied into your package.\\n  - The application that your package is included in **must** provide the peer dependency.\\n\\n### Custom elements\\n\\n- Custom elements are one of the three main pieces of what makes up a Web Component. Web components are at the core of Forge.\\n- The `CustomElementRegistry` is a dictionary (useful oversimplification) of all of the custom elements registered in the browser. The custom element\u2019s name acts as the key, and the `class` is the value.\\n  - All keys/element names must be unique.\\n\\n### What not to do\\n\\n:::info\\nLet\u2019s say you created a new library package to use across a few of your apps. We\u2019ll call it `fooLib`. In this example, `fooLib` declares `Forge v2.0.0` as a dependency. So `Forge v2.0.0` is *copied* into `fooLib`.\\n\\nIn your app, `barApp`, you declare `Forge v3.5.0` as a dependency. `barApp` also declares `fooLib` as a dependency.\\n\\nThis results in Forge being included in your app *twice*. Once for your app at `v2.0.0` and once for your library at `v3.5.0`.\\n:::\\n\\n### Why it\u2019s a problem\\n\\nThere are several reasons you wouldn\u2019t want to do this. First of all, your application is needlessly bloated by including Forge twice. But that is outside the scope of this document. We\u2019ll focus on the issue this causes with custom elements.\\n\\nSince `barApp` now runs with 2 copies of Forge, that means it will potentially attempt to register 2 different versions of each component in Forge. Remember the browser\'s `CustomElementRegistry` is effectively a dictionary. So you can\u2019t register two different custom elements under the same key. So what happens is that whatever version registers first \u201cwins\u201d.\\n\\nAs an example, let\u2019s say `forge-selector v2.0.0` gets registered first for `fooLib`. Then later, `forge-selector v3.5.0` attempts to register for `barApp`. The key \\"forge-selector\\" is already registered, so the second registration attempt fails silently. But now `barApp` is stuck with `forge-selector v2.0.0`. Let\u2019s say the newer version of `forge-selector` had added type-ahead functionality that we\u2019re utilizing in `barApp`. However, now that the older version registered first, anywhere we\u2019re using that new type-ahead feature is now broken with little to no leads as to what happened.\\n\\nHopefully, that illustrates the reason you wouldn\u2019t ever want to set Forge as a dependency of a package.\\n\\n---\\n\\n## Peer dependencies\\n\\nSo how do we safely manage Forge versions?\\n\\nIf you need to create a library that utilizes Forge, declare it as a peer dependency for the reasons mentioned above.\\n\\nThis means that your new library will need to implement Forge according to the version dictated by your dependent applications.\\n\\nGoing back to our earlier example involving `fooLib` and `barApp`. This time, `fooLib` declares Forge as a peer dependency.\\n\\n:::info\\nIn this case, Forge is only included once in the application at `v3.5.0`. Since it\u2019s included only once (by the application) there are no registration conflicts with any of the custom elements. But now `fooLib` is using `Forge v3.5.0` when it was originally implemented using `Forge v2.0.0`. Obviously, this can still lead to breaking changes in the Forge components since `fooLib` could be using features that no longer exist in `Forge v3.5.0`.\\n:::\\n\\nThe solution is that both `fooLib` and `barApp` need to be kept within the same major version.\\n\\nForge follows [semver](https://semver.org/) versioning practices. So we will not (intentionally) introduce any breaking changes within the same major version of Forge.\\n\\nSo if `fooLib` had a *peer* dependency of `Forge v1.0.1` and `barApp` had a dependency of `Forge v3.5.0`, there would be no breaking changes and both would work as expected.\\n\\n---\\n\\n## In summary\\n\\n- When possible, avoid including `dependencies` (of any kind) in your packages.\\n- Use `peerDependencies` where it cannot be avoided.\\n- Always keep your apps and packages within the same major version of Forge."}]}')}}]);